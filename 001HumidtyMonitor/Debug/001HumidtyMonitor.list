
001HumidtyMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000353c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036dc  080036dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e4  080036e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080036f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080036f8  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d903  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001df0  00000000  00000000  0002d93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000305e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002183c  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa06  00000000  00000000  00052be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf159  00000000  00000000  0005d5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  0012c7c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036ac 	.word	0x080036ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036ac 	.word	0x080036ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Set_Pin_Output>:
#include <stdint.h>



void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f001 f984 	bl	8001808 <HAL_GPIO_Init>
}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f001 f964 	bl	8001808 <HAL_GPIO_Init>
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <DHT11_Start>:

void DHT11_Start (void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	Set_Pin_Output (dht11_GPIO_Port, dht11_Pin);
 800054c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <DHT11_Start+0x44>)
 8000552:	f7ff ffb9 	bl	80004c8 <Set_Pin_Output>
	HAL_GPIO_WritePin (dht11_GPIO_Port, dht11_Pin, DISABLE);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <DHT11_Start+0x44>)
 800055e:	f001 fb05 	bl	8001b6c <HAL_GPIO_WritePin>
	delay(18000);
 8000562:	f244 6050 	movw	r0, #18000	; 0x4650
 8000566:	f000 f943 	bl	80007f0 <delay>
	HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, ENABLE);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <DHT11_Start+0x44>)
 8000572:	f001 fafb 	bl	8001b6c <HAL_GPIO_WritePin>
	delay(20);
 8000576:	2014      	movs	r0, #20
 8000578:	f000 f93a 	bl	80007f0 <delay>
	Set_Pin_Input(dht11_GPIO_Port, dht11_Pin);
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <DHT11_Start+0x44>)
 8000582:	f7ff ffc1 	bl	8000508 <Set_Pin_Input>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020000 	.word	0x40020000

08000590 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 f928 	bl	80007f0 <delay>
	if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005a6:	f001 fac9 	bl	8001b3c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10f      	bne.n	80005d0 <DHT11_Check_Response+0x40>
	{
		delay (80);
 80005b0:	2050      	movs	r0, #80	; 0x50
 80005b2:	f000 f91d 	bl	80007f0 <delay>
		if ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005bc:	f001 fabe 	bl	8001b3c <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <DHT11_Check_Response+0x3c>
			Response = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <DHT11_Check_Response+0x40>
		else
			Response = -1;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005d0:	bf00      	nop
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005d8:	f001 fab0 	bl	8001b3c <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f7      	bne.n	80005d2 <DHT11_Check_Response+0x42>
	return Response;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	e03a      	b.n	8000672 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005fc:	bf00      	nop
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	4820      	ldr	r0, [pc, #128]	; (8000684 <DHT11_Read+0x94>)
 8000604:	f001 fa9a 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f7      	beq.n	80005fe <DHT11_Read+0xe>
		delay (40);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 f8ee 	bl	80007f0 <delay>
		if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <DHT11_Read+0x94>)
 800061a:	f001 fa8f 	bl	8001b3c <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10e      	bne.n	8000642 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2201      	movs	r2, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	b25b      	sxtb	r3, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	b25a      	sxtb	r2, r3
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	4013      	ands	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	e00b      	b.n	800065a <DHT11_Read+0x6a>
		}
		else
		{
			i|= (1<<(7-j));
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	f1c3 0307 	rsb	r3, r3, #7
 8000648:	2201      	movs	r2, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	b25a      	sxtb	r2, r3
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	4313      	orrs	r3, r2
 8000656:	b25b      	sxtb	r3, r3
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 800065a:	bf00      	nop
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <DHT11_Read+0x94>)
 8000662:	f001 fa6b 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f7      	bne.n	800065c <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	3301      	adds	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d9c1      	bls.n	80005fc <DHT11_Read+0xc>
	}
	return i;
 8000678:	79fb      	ldrb	r3, [r7, #7]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_TIM6_Init(void);
static void MX_UART4_Init(void);
void delay (uint16_t time);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	FLAG = 1;
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000164 	.word	0x20000164

080006a8 <main>:

int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(slave_select_GPIO_Port, slave_select_Pin, ENABLE);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <main+0x12c>)
 80006b4:	f001 fa5a 	bl	8001b6c <HAL_GPIO_WritePin>
  HAL_Init();
 80006b8:	f000 fc2e 	bl	8000f18 <HAL_Init>
  SystemClock_Config();
 80006bc:	f000 f8b0 	bl	8000820 <SystemClock_Config>
  MX_GPIO_Init();
 80006c0:	f000 fa00 	bl	8000ac4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c4:	f000 f966 	bl	8000994 <MX_SPI1_Init>
  MX_ADC1_Init();
 80006c8:	f000 f912 	bl	80008f0 <MX_ADC1_Init>
  MX_TIM6_Init();
 80006cc:	f000 f99a 	bl	8000a04 <MX_TIM6_Init>
  MX_UART4_Init();
 80006d0:	f000 f9ce 	bl	8000a70 <MX_UART4_Init>

  HAL_TIM_Base_Start(&htim6);
 80006d4:	4840      	ldr	r0, [pc, #256]	; (80007d8 <main+0x130>)
 80006d6:	f002 fab2 	bl	8002c3e <HAL_TIM_Base_Start>

  while (1)
  {

	  if(FLAG == 1)
 80006da:	4b40      	ldr	r3, [pc, #256]	; (80007dc <main+0x134>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d111      	bne.n	8000708 <main+0x60>
	  {
		  HAL_GPIO_TogglePin(led_green_GPIO_Port, led_green_Pin);
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	483d      	ldr	r0, [pc, #244]	; (80007e0 <main+0x138>)
 80006ea:	f001 fa58 	bl	8001b9e <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f000 fc84 	bl	8000ffc <HAL_Delay>
		  FLAG = 0;
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <main+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		  counter = counter + 1;
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <main+0x13c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <main+0x13c>)
 8000706:	701a      	strb	r2, [r3, #0]
	  {
		  potvar.pot_value = HAL_ADC_GetValue(&hadc1);
	  }
*/

	  if (counter % 2 == 1)
 8000708:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <main+0x13c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b01      	cmp	r3, #1
 8000716:	d1e0      	bne.n	80006da <main+0x32>
	  {
		  DHT11_Start();
 8000718:	f7ff ff16 	bl	8000548 <DHT11_Start>
		  dhtsensorvar.response = DHT11_Check_Response();
 800071c:	f7ff ff38 	bl	8000590 <DHT11_Check_Response>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <main+0x140>)
 8000726:	711a      	strb	r2, [r3, #4]
		  HAL_GPIO_WritePin(slave_select_GPIO_Port, slave_select_Pin, DISABLE);
 8000728:	2200      	movs	r2, #0
 800072a:	2110      	movs	r1, #16
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <main+0x12c>)
 800072e:	f001 fa1d 	bl	8001b6c <HAL_GPIO_WritePin>
		  if (dhtsensorvar.response == 1)
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <main+0x140>)
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b01      	cmp	r3, #1
 800073a:	d146      	bne.n	80007ca <main+0x122>
		  {
			  dhtsensorvar.humidity_byte1 = DHT11_Read();
 800073c:	f7ff ff58 	bl	80005f0 <DHT11_Read>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <main+0x140>)
 8000746:	701a      	strb	r2, [r3, #0]
			  dhtsensorvar.humidity_byte2 = DHT11_Read();
 8000748:	f7ff ff52 	bl	80005f0 <DHT11_Read>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <main+0x140>)
 8000752:	705a      	strb	r2, [r3, #1]
			  dhtsensorvar.temperature_byte1 = DHT11_Read();
 8000754:	f7ff ff4c 	bl	80005f0 <DHT11_Read>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <main+0x140>)
 800075e:	709a      	strb	r2, [r3, #2]
			  dhtsensorvar.temperature_byte2 = DHT11_Read();
 8000760:	f7ff ff46 	bl	80005f0 <DHT11_Read>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0x140>)
 800076a:	70da      	strb	r2, [r3, #3]
			  dhtsensorvar.parity = DHT11_Read();
 800076c:	f7ff ff40 	bl	80005f0 <DHT11_Read>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0x140>)
 8000776:	80da      	strh	r2, [r3, #6]
			  dhtsensorvar.humidity_RAW = dhtsensorvar.humidity_byte1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <main+0x140>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <main+0x140>)
 8000782:	811a      	strh	r2, [r3, #8]
			  dhtsensorvar.temperature_RAW = dhtsensorvar.temperature_byte1;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <main+0x140>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <main+0x140>)
 800078e:	815a      	strh	r2, [r3, #10]
			  dhtsensorvar.TEMPERATURE = (int)dhtsensorvar.temperature_RAW;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <main+0x140>)
 8000792:	895b      	ldrh	r3, [r3, #10]
 8000794:	b29b      	uxth	r3, r3
 8000796:	461a      	mov	r2, r3
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <main+0x140>)
 800079a:	60da      	str	r2, [r3, #12]
			  dhtsensorvar.HUMIDITY = (int)dhtsensorvar.humidity_RAW;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <main+0x140>)
 800079e:	891b      	ldrh	r3, [r3, #8]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <main+0x140>)
 80007a6:	611a      	str	r2, [r3, #16]
			  uint8_t temp1 = (uint8_t)dhtsensorvar.HUMIDITY;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <main+0x140>)
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	71bb      	strb	r3, [r7, #6]
			  uint8_t temp2 = (uint8_t)dhtsensorvar.TEMPERATURE;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <main+0x140>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	71fb      	strb	r3, [r7, #7]
			  HAL_SPI_Transmit(&hspi1, &temp1, 1, 10);
 80007b6:	1db9      	adds	r1, r7, #6
 80007b8:	230a      	movs	r3, #10
 80007ba:	2201      	movs	r2, #1
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <main+0x144>)
 80007be:	f001 fee5 	bl	800258c <HAL_SPI_Transmit>
			  HAL_Delay(100);
 80007c2:	2064      	movs	r0, #100	; 0x64
 80007c4:	f000 fc1a 	bl	8000ffc <HAL_Delay>
 80007c8:	e787      	b.n	80006da <main+0x32>
		  }
		  else
		  {
			  HAL_SPI_Abort(&hspi1);
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <main+0x144>)
 80007cc:	f002 f812 	bl	80027f4 <HAL_SPI_Abort>
	  if(FLAG == 1)
 80007d0:	e783      	b.n	80006da <main+0x32>
 80007d2:	bf00      	nop
 80007d4:	40020000 	.word	0x40020000
 80007d8:	20000078 	.word	0x20000078
 80007dc:	20000164 	.word	0x20000164
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	20000028 	.word	0x20000028
 80007e8:	20000150 	.word	0x20000150
 80007ec:	200000f8 	.word	0x200000f8

080007f0 <delay>:
  return 0;
}


void delay (uint16_t time)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <delay+0x2c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000802:	bf00      	nop
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <delay+0x2c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3f9      	bcc.n	8000804 <delay+0x14>
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	20000078 	.word	0x20000078

08000820 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ff34 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800089c:	2307      	movs	r3, #7
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 f9ad 	bl	8001c04 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f996 	bl	8000be0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2101      	movs	r1, #1
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fc07 	bl	80020e4 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f980 	bl	8000be0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC1_Init+0x98>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <MX_ADC1_Init+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ADC1_Init+0x98>)
 8000910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000914:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0x98>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_ADC1_Init+0xa0>)
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0x98>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_ADC1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_ADC1_Init+0x98>)
 8000952:	f000 fb75 	bl	8001040 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 f940 	bl	8000be0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8000960:	2301      	movs	r3, #1
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_ADC1_Init+0x98>)
 8000972:	f000 fba9 	bl	80010c8 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 f930 	bl	8000be0 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000002c 	.word	0x2000002c
 800098c:	40012000 	.word	0x40012000
 8000990:	0f000001 	.word	0x0f000001

08000994 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x68>)
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <MX_SPI1_Init+0x6c>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_SPI1_Init+0x68>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_SPI1_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x68>)
 80009ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_SPI1_Init+0x68>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x68>)
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x68>)
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x68>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x68>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x68>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_SPI1_Init+0x68>)
 80009e8:	f001 fd6c 	bl	80024c4 <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80009f2:	f000 f8f5 	bl	8000be0 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000f8 	.word	0x200000f8
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_TIM6_Init+0x68>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a1a:	2231      	movs	r2, #49	; 0x31
 8000a1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a34:	f002 f8d8 	bl	8002be8 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a3e:	f000 f8cf 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_TIM6_Init+0x64>)
 8000a50:	f002 f9ba 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 f8c1 	bl	8000be0 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000078 	.word	0x20000078
 8000a6c:	40001000 	.word	0x40001000

08000a70 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_UART4_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_UART4_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_UART4_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_UART4_Init+0x4c>)
 8000aa8:	f002 fa0a 	bl	8002ec0 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f000 f895 	bl	8000be0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000b8 	.word	0x200000b8
 8000ac0:	40004c00 	.word	0x40004c00

08000ac4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3b      	ldr	r2, [pc, #236]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_GPIO_Init+0x10c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, slave_select_Pin|dht11_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b50:	4820      	ldr	r0, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0x110>)
 8000b52:	f001 f80b 	bl	8001b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x114>)
 8000b5e:	f001 f805 	bl	8001b6c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = button_Pin;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_GPIO_Init+0x118>)
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0x110>)
 8000b76:	f000 fe47 	bl	8001808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = slave_select_Pin|dht11_Pin;
 8000b7a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <MX_GPIO_Init+0x110>)
 8000b94:	f000 fe38 	bl	8001808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin;
 8000b98:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <MX_GPIO_Init+0x114>)
 8000bb2:	f000 fe29 	bl	8001808 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2006      	movs	r0, #6
 8000bbc:	f000 fd7d 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bc0:	2006      	movs	r0, #6
 8000bc2:	f000 fd96 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	10110000 	.word	0x10110000

08000be0 <Error_Handler>:

void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 fd38 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0x7c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d127      	bne.n	8000cb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot_Pin;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_ADC_MspInit+0x84>)
 8000cae:	f000 fdab 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_SPI_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12b      	bne.n	8000d42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d22:	23e0      	movs	r3, #224	; 0xe0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d32:	2305      	movs	r3, #5
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_SPI_MspInit+0x8c>)
 8000d3e:	f000 fd63 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40013000 	.word	0x40013000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <HAL_TIM_Base_MspInit+0x3c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10d      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40001000 	.word	0x40001000
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12c      	bne.n	8000e18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000df6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0x8c>)
 8000e14:	f000 fcf8 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004c00 	.word	0x40004c00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f89c 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fea1 	bl	8001bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SystemInit+0x28>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SystemInit+0x28>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SystemInit+0x28>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ece:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
  ldr  r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee4:	f842 3b04 	str.w	r3, [r2], #4

08000ee8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd3 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 fbaf 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fbd7 	bl	80006a8 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f00:	080036ec 	.word	0x080036ec
  ldr  r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f0c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f10:	2000016c 	.word	0x2000016c

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 fbaf 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe50 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fbc7 	bl	800170e <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 fb8f 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000168 	.word	0x20000168

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000168 	.word	0x20000168

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e033      	b.n	80010be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fdee 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d118      	bne.n	80010b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001086:	f023 0302 	bic.w	r3, r3, #2
 800108a:	f043 0202 	orr.w	r2, r3, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f93a 	bl	800130c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
 80010ae:	e001      	b.n	80010b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1c>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e105      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x228>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d925      	bls.n	8001140 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	3b1e      	subs	r3, #30
 800110a:	2207      	movs	r2, #7
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43da      	mvns	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	400a      	ands	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68d9      	ldr	r1, [r3, #12]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	4603      	mov	r3, r0
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4403      	add	r3, r0
 8001132:	3b1e      	subs	r3, #30
 8001134:	409a      	lsls	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	e022      	b.n	8001186 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6919      	ldr	r1, [r3, #16]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	2207      	movs	r2, #7
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	400a      	ands	r2, r1
 8001162:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6919      	ldr	r1, [r3, #16]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	4603      	mov	r3, r0
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4403      	add	r3, r0
 800117c:	409a      	lsls	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b06      	cmp	r3, #6
 800118c:	d824      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	3b05      	subs	r3, #5
 80011a0:	221f      	movs	r2, #31
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	400a      	ands	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b05      	subs	r3, #5
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	e04c      	b.n	8001272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	d824      	bhi.n	800122a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b23      	subs	r3, #35	; 0x23
 80011f2:	221f      	movs	r2, #31
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43da      	mvns	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	400a      	ands	r2, r1
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b23      	subs	r3, #35	; 0x23
 800121c:	fa00 f203 	lsl.w	r2, r0, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
 8001228:	e023      	b.n	8001272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	3b41      	subs	r3, #65	; 0x41
 800123c:	221f      	movs	r2, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	400a      	ands	r2, r1
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3b41      	subs	r3, #65	; 0x41
 8001266:	fa00 f203 	lsl.w	r2, r0, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_ADC_ConfigChannel+0x234>)
 8001274:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_ADC_ConfigChannel+0x238>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d109      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1cc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d105      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_ADC_ConfigChannel+0x238>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d123      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x21e>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d003      	beq.n	80012ae <HAL_ADC_ConfigChannel+0x1e6>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b11      	cmp	r3, #17
 80012ac:	d11b      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d111      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_ADC_ConfigChannel+0x23c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_ADC_ConfigChannel+0x240>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9a      	lsrs	r2, r3, #18
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40012300 	.word	0x40012300
 8001300:	40012000 	.word	0x40012000
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <ADC_Init+0x1f0>)
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	431a      	orrs	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <ADC_Init+0x1f4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00f      	b.n	800140a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0202 	bic.w	r2, r2, #2
 8001418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
 8001424:	005a      	lsls	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	3b01      	subs	r3, #1
 8001464:	035a      	lsls	r2, r3, #13
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e007      	b.n	8001480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	3b01      	subs	r3, #1
 800149c:	051a      	lsls	r2, r3, #20
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	029a      	lsls	r2, r3, #10
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	0f000001 	.word	0x0f000001

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff29 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff3e 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff31 	bl	8001568 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fc56 	bl	8000fe4 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e052      	b.n	80017fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0216 	bic.w	r2, r2, #22
 8001766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001776:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <HAL_DMA_Abort+0x62>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0208 	bic.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a8:	e013      	b.n	80017d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017aa:	f7ff fc1b 	bl	8000fe4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d90c      	bls.n	80017d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2220      	movs	r2, #32
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e015      	b.n	80017fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e4      	bne.n	80017aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	223f      	movs	r2, #63	; 0x3f
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e16b      	b.n	8001afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 815a 	bne.w	8001af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00b      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	2b11      	cmp	r3, #17
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0xfc>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80b4 	beq.w	8001af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_GPIO_Init+0x308>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_GPIO_Init+0x308>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_GPIO_Init+0x308>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x320>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x324>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x328>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x32c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x20a>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00e      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae90 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021c00 	.word	0x40021c00
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d104      	bne.n	8001bc2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fd48 	bl	8000688 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e25b      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d075      	beq.n	8001d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d00c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4ba0      	ldr	r3, [pc, #640]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d05b      	beq.n	8001d0c <HAL_RCC_OscConfig+0x108>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d157      	bne.n	8001d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e236      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x74>
 8001c6a:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a90      	ldr	r2, [pc, #576]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a8a      	ldr	r2, [pc, #552]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a87      	ldr	r2, [pc, #540]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a80      	ldr	r2, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f992 	bl	8000fe4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f98e 	bl	8000fe4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1fb      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xc0>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f97e 	bl	8000fe4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f97a 	bl	8000fe4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1e7      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0xe8>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1a:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1bb      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4952      	ldr	r1, [pc, #328]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <HAL_RCC_OscConfig+0x2b0>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f933 	bl	8000fe4 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f92f 	bl	8000fe4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e19c      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4940      	ldr	r1, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_OscConfig+0x2b0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f912 	bl	8000fe4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f90e 	bl	8000fe4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e17b      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d030      	beq.n	8001e50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f8f2 	bl	8000fe4 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff f8ee 	bl	8000fe4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e15b      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x200>
 8001e22:	e015      	b.n	8001e50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f8db 	bl	8000fe4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f8d7 	bl	8000fe4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e144      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a0 	beq.w	8001f9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d121      	bne.n	8001ede <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f89d 	bl	8000fe4 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e011      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2ce>
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470000 	.word	0x42470000
 8001eb8:	42470e80 	.word	0x42470e80
 8001ebc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7ff f890 	bl	8000fe4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0fd      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x4d4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
 8001ee6:	4b7d      	ldr	r3, [pc, #500]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a7c      	ldr	r2, [pc, #496]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCC_OscConfig+0x32a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001efc:	4b77      	ldr	r3, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a76      	ldr	r2, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
 8001f08:	4b74      	ldr	r3, [pc, #464]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a73      	ldr	r2, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x32a>
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a70      	ldr	r2, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a6d      	ldr	r2, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff f855 	bl	8000fe4 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff f851 	bl	8000fe4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0bc      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCC_OscConfig+0x33a>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff f83f 	bl	8000fe4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f83b 	bl	8000fe4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0a6      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8092 	beq.w	80020cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d05c      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d141      	bne.n	8002040 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x4dc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f80f 	bl	8000fe4 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff f80b 	bl	8000fe4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e078      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	019b      	lsls	r3, r3, #6
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	4933      	ldr	r1, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_RCC_OscConfig+0x4dc>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ffe4 	bl	8000fe4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ffe0 	bl	8000fe4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e04d      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x41c>
 800203e:	e045      	b.n	80020cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x4dc>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ffcd 	bl	8000fe4 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ffc9 	bl	8000fe4 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e036      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x44a>
 800206c:	e02e      	b.n	80020cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e029      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_RCC_OscConfig+0x4d8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	429a      	cmp	r2, r3
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d115      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40007000 	.word	0x40007000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470060 	.word	0x42470060

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0cc      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d90c      	bls.n	8002120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d044      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e067      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4934      	ldr	r1, [pc, #208]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe ff06 	bl	8000fe4 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe ff02 	bl	8000fe4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d20c      	bcs.n	800222c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4601      	mov	r1, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	fa21 f303 	lsr.w	r3, r1, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fe66 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	080036c4 	.word	0x080036c4
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c6:	4b63      	ldr	r3, [pc, #396]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d007      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x32>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d008      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x38>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80b4 	bne.w	8002444 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022de:	60bb      	str	r3, [r7, #8]
       break;
 80022e0:	e0b3      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022e4:	60bb      	str	r3, [r7, #8]
      break;
 80022e6:	e0b0      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f2:	4b58      	ldr	r3, [pc, #352]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d04a      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	f04f 0400 	mov.w	r4, #0
 8002308:	f240 11ff 	movw	r1, #511	; 0x1ff
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	ea03 0501 	and.w	r5, r3, r1
 8002314:	ea04 0602 	and.w	r6, r4, r2
 8002318:	4629      	mov	r1, r5
 800231a:	4632      	mov	r2, r6
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f04f 0400 	mov.w	r4, #0
 8002324:	0154      	lsls	r4, r2, #5
 8002326:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800232a:	014b      	lsls	r3, r1, #5
 800232c:	4619      	mov	r1, r3
 800232e:	4622      	mov	r2, r4
 8002330:	1b49      	subs	r1, r1, r5
 8002332:	eb62 0206 	sbc.w	r2, r2, r6
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	f04f 0400 	mov.w	r4, #0
 800233e:	0194      	lsls	r4, r2, #6
 8002340:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002344:	018b      	lsls	r3, r1, #6
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	eb64 0402 	sbc.w	r4, r4, r2
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	00e2      	lsls	r2, r4, #3
 8002356:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800235a:	00d9      	lsls	r1, r3, #3
 800235c:	460b      	mov	r3, r1
 800235e:	4614      	mov	r4, r2
 8002360:	195b      	adds	r3, r3, r5
 8002362:	eb44 0406 	adc.w	r4, r4, r6
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	02a2      	lsls	r2, r4, #10
 8002370:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002374:	0299      	lsls	r1, r3, #10
 8002376:	460b      	mov	r3, r1
 8002378:	4614      	mov	r4, r2
 800237a:	4618      	mov	r0, r3
 800237c:	4621      	mov	r1, r4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f04f 0400 	mov.w	r4, #0
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	f7fd ff1e 	bl	80001c8 <__aeabi_uldivmod>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e049      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	f04f 0400 	mov.w	r4, #0
 800239e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	ea03 0501 	and.w	r5, r3, r1
 80023aa:	ea04 0602 	and.w	r6, r4, r2
 80023ae:	4629      	mov	r1, r5
 80023b0:	4632      	mov	r2, r6
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0154      	lsls	r4, r2, #5
 80023bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023c0:	014b      	lsls	r3, r1, #5
 80023c2:	4619      	mov	r1, r3
 80023c4:	4622      	mov	r2, r4
 80023c6:	1b49      	subs	r1, r1, r5
 80023c8:	eb62 0206 	sbc.w	r2, r2, r6
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	0194      	lsls	r4, r2, #6
 80023d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023da:	018b      	lsls	r3, r1, #6
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	eb64 0402 	sbc.w	r4, r4, r2
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	00e2      	lsls	r2, r4, #3
 80023ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023f0:	00d9      	lsls	r1, r3, #3
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	195b      	adds	r3, r3, r5
 80023f8:	eb44 0406 	adc.w	r4, r4, r6
 80023fc:	f04f 0100 	mov.w	r1, #0
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	02a2      	lsls	r2, r4, #10
 8002406:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800240a:	0299      	lsls	r1, r3, #10
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	4618      	mov	r0, r3
 8002412:	4621      	mov	r1, r4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	f7fd fed3 	bl	80001c8 <__aeabi_uldivmod>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	60bb      	str	r3, [r7, #8]
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002446:	60bb      	str	r3, [r7, #8]
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	68bb      	ldr	r3, [r7, #8]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	00f42400 	.word	0x00f42400

0800245c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	080036d4 	.word	0x080036d4

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffdc 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a4:	4601      	mov	r1, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	080036d4 	.word	0x080036d4

080024c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e056      	b.n	8002584 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7fe fbe9 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	ea42 0103 	orr.w	r1, r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	f003 0104 	and.w	r1, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_SPI_Transmit+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e11e      	b.n	80027ec <HAL_SPI_Transmit+0x260>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b6:	f7fe fd15 	bl	8000fe4 <HAL_GetTick>
 80025ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
 80025ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d0:	e103      	b.n	80027da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Transmit+0x52>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025e2:	e0fa      	b.n	80027da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2203      	movs	r2, #3
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262a:	d107      	bne.n	800263c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d007      	beq.n	800265a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002662:	d14b      	bne.n	80026fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_SPI_Transmit+0xe6>
 800266c:	8afb      	ldrh	r3, [r7, #22]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d13e      	bne.n	80026f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	1c9a      	adds	r2, r3, #2
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002696:	e02b      	b.n	80026f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d112      	bne.n	80026cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80026ca:	e011      	b.n	80026f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026cc:	f7fe fc8a 	bl	8000fe4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d803      	bhi.n	80026e4 <HAL_SPI_Transmit+0x158>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d102      	bne.n	80026ea <HAL_SPI_Transmit+0x15e>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026ee:	e074      	b.n	80027da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ce      	bne.n	8002698 <HAL_SPI_Transmit+0x10c>
 80026fa:	e04c      	b.n	8002796 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x17e>
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d140      	bne.n	800278c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002730:	e02c      	b.n	800278c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d113      	bne.n	8002768 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	86da      	strh	r2, [r3, #54]	; 0x36
 8002766:	e011      	b.n	800278c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002768:	f7fe fc3c 	bl	8000fe4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d803      	bhi.n	8002780 <HAL_SPI_Transmit+0x1f4>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Transmit+0x1fa>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800278a:	e026      	b.n	80027da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1cd      	bne.n	8002732 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f980 	bl	8002aa0 <SPI_EndRxTxTransaction>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e000      	b.n	80027da <HAL_SPI_Transmit+0x24e>
  }

error:
 80027d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_SPI_Abort+0x1c8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6e      	ldr	r2, [pc, #440]	; (80029c0 <HAL_SPI_Abort+0x1cc>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a5b      	lsrs	r3, r3, #9
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0220 	bic.w	r2, r2, #32
 8002826:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d117      	bne.n	8002866 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a62      	ldr	r2, [pc, #392]	; (80029c4 <HAL_SPI_Abort+0x1d0>)
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800284e:	e008      	b.n	8002862 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3b01      	subs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b07      	cmp	r3, #7
 8002860:	d1ec      	bne.n	800283c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d117      	bne.n	80028a4 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_SPI_Abort+0x1d4>)
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800288c:	e008      	b.n	80028a0 <HAL_SPI_Abort+0xac>
      }
      count--;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3b01      	subs	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b07      	cmp	r3, #7
 800289e:	d1ec      	bne.n	800287a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d12e      	bne.n	8002910 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02a      	beq.n	8002910 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	2200      	movs	r2, #0
 80028c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe ff2d 	bl	8001726 <HAL_DMA_Abort>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0202 	bic.w	r2, r2, #2
 80028e6:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80028fa:	e009      	b.n	8002910 <HAL_SPI_Abort+0x11c>
        }
        count--;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	3b01      	subs	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0eb      	beq.n	80028e8 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d122      	bne.n	8002964 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01e      	beq.n	8002964 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	2200      	movs	r2, #0
 800292c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fef7 	bl	8001726 <HAL_DMA_Abort>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d102      	bne.n	800297e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e002      	b.n	8002984 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000
 80029c0:	057619f1 	.word	0x057619f1
 80029c4:	08002bad 	.word	0x08002bad
 80029c8:	08002b25 	.word	0x08002b25

080029cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029dc:	e04c      	b.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d048      	beq.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029e6:	f7fe fafd 	bl	8000fe4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d902      	bls.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13d      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a14:	d111      	bne.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1e:	d004      	beq.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d107      	bne.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	d10f      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e00f      	b.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d1a3      	bne.n	80029de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <SPI_EndRxTxTransaction+0x7c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <SPI_EndRxTxTransaction+0x80>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0d5b      	lsrs	r3, r3, #21
 8002ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aca:	d112      	bne.n	8002af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff ff78 	bl	80029cc <SPI_WaitFlagStateUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e00f      	b.n	8002b12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d0f2      	beq.n	8002af2 <SPI_EndRxTxTransaction+0x52>
 8002b0c:	e000      	b.n	8002b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b0e:	bf00      	nop
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	165e9f81 	.word	0x165e9f81

08002b24 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <SPI_AbortRx_ISR+0x80>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <SPI_AbortRx_ISR+0x84>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a5b      	lsrs	r3, r3, #9
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b52:	e009      	b.n	8002b68 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0eb      	beq.n	8002b40 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b86:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2207      	movs	r2, #7
 8002b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	057619f1 	.word	0x057619f1

08002bac <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01d      	b.n	8002c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe f8a2 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 f82e 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a40      	ldr	r2, [pc, #256]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d027      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d017      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <TIM_Base_SetConfig+0x128>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <TIM_Base_SetConfig+0x130>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <TIM_Base_SetConfig+0x134>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <TIM_Base_SetConfig+0x138>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <TIM_Base_SetConfig+0x13c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40001c00 	.word	0x40001c00
 8002dc4:	40002000 	.word	0x40002000

08002dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e05a      	b.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d022      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d01d      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d018      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00e      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10c      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40010400 	.word	0x40010400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40001800 	.word	0x40001800

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e03f      	b.n	8002f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd ff58 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f829 	bl	8002f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f9e:	f023 030c 	bic.w	r3, r3, #12
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fca:	f040 818b 	bne.w	80032e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4ac1      	ldr	r2, [pc, #772]	; (80032d8 <UART_SetConfig+0x37c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d005      	beq.n	8002fe4 <UART_SetConfig+0x88>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4abf      	ldr	r2, [pc, #764]	; (80032dc <UART_SetConfig+0x380>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f040 80bd 	bne.w	800315e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7ff fa5a 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8002fe8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	461d      	mov	r5, r3
 8002fee:	f04f 0600 	mov.w	r6, #0
 8002ff2:	46a8      	mov	r8, r5
 8002ff4:	46b1      	mov	r9, r6
 8002ff6:	eb18 0308 	adds.w	r3, r8, r8
 8002ffa:	eb49 0409 	adc.w	r4, r9, r9
 8002ffe:	4698      	mov	r8, r3
 8003000:	46a1      	mov	r9, r4
 8003002:	eb18 0805 	adds.w	r8, r8, r5
 8003006:	eb49 0906 	adc.w	r9, r9, r6
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003016:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800301a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800301e:	4688      	mov	r8, r1
 8003020:	4691      	mov	r9, r2
 8003022:	eb18 0005 	adds.w	r0, r8, r5
 8003026:	eb49 0106 	adc.w	r1, r9, r6
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	461d      	mov	r5, r3
 8003030:	f04f 0600 	mov.w	r6, #0
 8003034:	196b      	adds	r3, r5, r5
 8003036:	eb46 0406 	adc.w	r4, r6, r6
 800303a:	461a      	mov	r2, r3
 800303c:	4623      	mov	r3, r4
 800303e:	f7fd f8c3 	bl	80001c8 <__aeabi_uldivmod>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	461a      	mov	r2, r3
 8003048:	4ba5      	ldr	r3, [pc, #660]	; (80032e0 <UART_SetConfig+0x384>)
 800304a:	fba3 2302 	umull	r2, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	461d      	mov	r5, r3
 8003058:	f04f 0600 	mov.w	r6, #0
 800305c:	46a9      	mov	r9, r5
 800305e:	46b2      	mov	sl, r6
 8003060:	eb19 0309 	adds.w	r3, r9, r9
 8003064:	eb4a 040a 	adc.w	r4, sl, sl
 8003068:	4699      	mov	r9, r3
 800306a:	46a2      	mov	sl, r4
 800306c:	eb19 0905 	adds.w	r9, r9, r5
 8003070:	eb4a 0a06 	adc.w	sl, sl, r6
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003080:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003084:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003088:	4689      	mov	r9, r1
 800308a:	4692      	mov	sl, r2
 800308c:	eb19 0005 	adds.w	r0, r9, r5
 8003090:	eb4a 0106 	adc.w	r1, sl, r6
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	461d      	mov	r5, r3
 800309a:	f04f 0600 	mov.w	r6, #0
 800309e:	196b      	adds	r3, r5, r5
 80030a0:	eb46 0406 	adc.w	r4, r6, r6
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	f7fd f88e 	bl	80001c8 <__aeabi_uldivmod>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b8b      	ldr	r3, [pc, #556]	; (80032e0 <UART_SetConfig+0x384>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	; 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a86      	ldr	r2, [pc, #536]	; (80032e0 <UART_SetConfig+0x384>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030d4:	4498      	add	r8, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	461d      	mov	r5, r3
 80030da:	f04f 0600 	mov.w	r6, #0
 80030de:	46a9      	mov	r9, r5
 80030e0:	46b2      	mov	sl, r6
 80030e2:	eb19 0309 	adds.w	r3, r9, r9
 80030e6:	eb4a 040a 	adc.w	r4, sl, sl
 80030ea:	4699      	mov	r9, r3
 80030ec:	46a2      	mov	sl, r4
 80030ee:	eb19 0905 	adds.w	r9, r9, r5
 80030f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310a:	4689      	mov	r9, r1
 800310c:	4692      	mov	sl, r2
 800310e:	eb19 0005 	adds.w	r0, r9, r5
 8003112:	eb4a 0106 	adc.w	r1, sl, r6
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	461d      	mov	r5, r3
 800311c:	f04f 0600 	mov.w	r6, #0
 8003120:	196b      	adds	r3, r5, r5
 8003122:	eb46 0406 	adc.w	r4, r6, r6
 8003126:	461a      	mov	r2, r3
 8003128:	4623      	mov	r3, r4
 800312a:	f7fd f84d 	bl	80001c8 <__aeabi_uldivmod>
 800312e:	4603      	mov	r3, r0
 8003130:	460c      	mov	r4, r1
 8003132:	461a      	mov	r2, r3
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <UART_SetConfig+0x384>)
 8003136:	fba3 1302 	umull	r1, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2164      	movs	r1, #100	; 0x64
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	3332      	adds	r3, #50	; 0x32
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <UART_SetConfig+0x384>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	f003 0207 	and.w	r2, r3, #7
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4442      	add	r2, r8
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e26f      	b.n	800363e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7ff f989 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003162:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	461d      	mov	r5, r3
 8003168:	f04f 0600 	mov.w	r6, #0
 800316c:	46a8      	mov	r8, r5
 800316e:	46b1      	mov	r9, r6
 8003170:	eb18 0308 	adds.w	r3, r8, r8
 8003174:	eb49 0409 	adc.w	r4, r9, r9
 8003178:	4698      	mov	r8, r3
 800317a:	46a1      	mov	r9, r4
 800317c:	eb18 0805 	adds.w	r8, r8, r5
 8003180:	eb49 0906 	adc.w	r9, r9, r6
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003190:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003194:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003198:	4688      	mov	r8, r1
 800319a:	4691      	mov	r9, r2
 800319c:	eb18 0005 	adds.w	r0, r8, r5
 80031a0:	eb49 0106 	adc.w	r1, r9, r6
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	461d      	mov	r5, r3
 80031aa:	f04f 0600 	mov.w	r6, #0
 80031ae:	196b      	adds	r3, r5, r5
 80031b0:	eb46 0406 	adc.w	r4, r6, r6
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	f7fd f806 	bl	80001c8 <__aeabi_uldivmod>
 80031bc:	4603      	mov	r3, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <UART_SetConfig+0x384>)
 80031c4:	fba3 2302 	umull	r2, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	461d      	mov	r5, r3
 80031d2:	f04f 0600 	mov.w	r6, #0
 80031d6:	46a9      	mov	r9, r5
 80031d8:	46b2      	mov	sl, r6
 80031da:	eb19 0309 	adds.w	r3, r9, r9
 80031de:	eb4a 040a 	adc.w	r4, sl, sl
 80031e2:	4699      	mov	r9, r3
 80031e4:	46a2      	mov	sl, r4
 80031e6:	eb19 0905 	adds.w	r9, r9, r5
 80031ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003202:	4689      	mov	r9, r1
 8003204:	4692      	mov	sl, r2
 8003206:	eb19 0005 	adds.w	r0, r9, r5
 800320a:	eb4a 0106 	adc.w	r1, sl, r6
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	461d      	mov	r5, r3
 8003214:	f04f 0600 	mov.w	r6, #0
 8003218:	196b      	adds	r3, r5, r5
 800321a:	eb46 0406 	adc.w	r4, r6, r6
 800321e:	461a      	mov	r2, r3
 8003220:	4623      	mov	r3, r4
 8003222:	f7fc ffd1 	bl	80001c8 <__aeabi_uldivmod>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	461a      	mov	r2, r3
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <UART_SetConfig+0x384>)
 800322e:	fba3 1302 	umull	r1, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2164      	movs	r1, #100	; 0x64
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <UART_SetConfig+0x384>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800324e:	4498      	add	r8, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	461d      	mov	r5, r3
 8003254:	f04f 0600 	mov.w	r6, #0
 8003258:	46a9      	mov	r9, r5
 800325a:	46b2      	mov	sl, r6
 800325c:	eb19 0309 	adds.w	r3, r9, r9
 8003260:	eb4a 040a 	adc.w	r4, sl, sl
 8003264:	4699      	mov	r9, r3
 8003266:	46a2      	mov	sl, r4
 8003268:	eb19 0905 	adds.w	r9, r9, r5
 800326c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800327c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003280:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003284:	4689      	mov	r9, r1
 8003286:	4692      	mov	sl, r2
 8003288:	eb19 0005 	adds.w	r0, r9, r5
 800328c:	eb4a 0106 	adc.w	r1, sl, r6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	461d      	mov	r5, r3
 8003296:	f04f 0600 	mov.w	r6, #0
 800329a:	196b      	adds	r3, r5, r5
 800329c:	eb46 0406 	adc.w	r4, r6, r6
 80032a0:	461a      	mov	r2, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	f7fc ff90 	bl	80001c8 <__aeabi_uldivmod>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <UART_SetConfig+0x384>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <UART_SetConfig+0x384>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 0207 	and.w	r2, r3, #7
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4442      	add	r2, r8
 80032d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032d6:	e1b2      	b.n	800363e <UART_SetConfig+0x6e2>
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40011400 	.word	0x40011400
 80032e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4ad7      	ldr	r2, [pc, #860]	; (8003648 <UART_SetConfig+0x6ec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d005      	beq.n	80032fa <UART_SetConfig+0x39e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4ad6      	ldr	r2, [pc, #856]	; (800364c <UART_SetConfig+0x6f0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	f040 80d1 	bne.w	800349c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032fa:	f7ff f8cf 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 80032fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	469a      	mov	sl, r3
 8003304:	f04f 0b00 	mov.w	fp, #0
 8003308:	46d0      	mov	r8, sl
 800330a:	46d9      	mov	r9, fp
 800330c:	eb18 0308 	adds.w	r3, r8, r8
 8003310:	eb49 0409 	adc.w	r4, r9, r9
 8003314:	4698      	mov	r8, r3
 8003316:	46a1      	mov	r9, r4
 8003318:	eb18 080a 	adds.w	r8, r8, sl
 800331c:	eb49 090b 	adc.w	r9, r9, fp
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800332c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003330:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003334:	4688      	mov	r8, r1
 8003336:	4691      	mov	r9, r2
 8003338:	eb1a 0508 	adds.w	r5, sl, r8
 800333c:	eb4b 0609 	adc.w	r6, fp, r9
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4619      	mov	r1, r3
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0094      	lsls	r4, r2, #2
 8003354:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003358:	008b      	lsls	r3, r1, #2
 800335a:	461a      	mov	r2, r3
 800335c:	4623      	mov	r3, r4
 800335e:	4628      	mov	r0, r5
 8003360:	4631      	mov	r1, r6
 8003362:	f7fc ff31 	bl	80001c8 <__aeabi_uldivmod>
 8003366:	4603      	mov	r3, r0
 8003368:	460c      	mov	r4, r1
 800336a:	461a      	mov	r2, r3
 800336c:	4bb8      	ldr	r3, [pc, #736]	; (8003650 <UART_SetConfig+0x6f4>)
 800336e:	fba3 2302 	umull	r2, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	469b      	mov	fp, r3
 800337c:	f04f 0c00 	mov.w	ip, #0
 8003380:	46d9      	mov	r9, fp
 8003382:	46e2      	mov	sl, ip
 8003384:	eb19 0309 	adds.w	r3, r9, r9
 8003388:	eb4a 040a 	adc.w	r4, sl, sl
 800338c:	4699      	mov	r9, r3
 800338e:	46a2      	mov	sl, r4
 8003390:	eb19 090b 	adds.w	r9, r9, fp
 8003394:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ac:	4689      	mov	r9, r1
 80033ae:	4692      	mov	sl, r2
 80033b0:	eb1b 0509 	adds.w	r5, fp, r9
 80033b4:	eb4c 060a 	adc.w	r6, ip, sl
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4619      	mov	r1, r3
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0400 	mov.w	r4, #0
 80033ca:	0094      	lsls	r4, r2, #2
 80033cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	4628      	mov	r0, r5
 80033d8:	4631      	mov	r1, r6
 80033da:	f7fc fef5 	bl	80001c8 <__aeabi_uldivmod>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b9a      	ldr	r3, [pc, #616]	; (8003650 <UART_SetConfig+0x6f4>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a95      	ldr	r2, [pc, #596]	; (8003650 <UART_SetConfig+0x6f4>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003404:	4498      	add	r8, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	469b      	mov	fp, r3
 800340a:	f04f 0c00 	mov.w	ip, #0
 800340e:	46d9      	mov	r9, fp
 8003410:	46e2      	mov	sl, ip
 8003412:	eb19 0309 	adds.w	r3, r9, r9
 8003416:	eb4a 040a 	adc.w	r4, sl, sl
 800341a:	4699      	mov	r9, r3
 800341c:	46a2      	mov	sl, r4
 800341e:	eb19 090b 	adds.w	r9, r9, fp
 8003422:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003432:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003436:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800343a:	4689      	mov	r9, r1
 800343c:	4692      	mov	sl, r2
 800343e:	eb1b 0509 	adds.w	r5, fp, r9
 8003442:	eb4c 060a 	adc.w	r6, ip, sl
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4619      	mov	r1, r3
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	0094      	lsls	r4, r2, #2
 800345a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800345e:	008b      	lsls	r3, r1, #2
 8003460:	461a      	mov	r2, r3
 8003462:	4623      	mov	r3, r4
 8003464:	4628      	mov	r0, r5
 8003466:	4631      	mov	r1, r6
 8003468:	f7fc feae 	bl	80001c8 <__aeabi_uldivmod>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	461a      	mov	r2, r3
 8003472:	4b77      	ldr	r3, [pc, #476]	; (8003650 <UART_SetConfig+0x6f4>)
 8003474:	fba3 1302 	umull	r1, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2164      	movs	r1, #100	; 0x64
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a72      	ldr	r2, [pc, #456]	; (8003650 <UART_SetConfig+0x6f4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4442      	add	r2, r8
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	e0d0      	b.n	800363e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe ffea 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 80034a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	469a      	mov	sl, r3
 80034a6:	f04f 0b00 	mov.w	fp, #0
 80034aa:	46d0      	mov	r8, sl
 80034ac:	46d9      	mov	r9, fp
 80034ae:	eb18 0308 	adds.w	r3, r8, r8
 80034b2:	eb49 0409 	adc.w	r4, r9, r9
 80034b6:	4698      	mov	r8, r3
 80034b8:	46a1      	mov	r9, r4
 80034ba:	eb18 080a 	adds.w	r8, r8, sl
 80034be:	eb49 090b 	adc.w	r9, r9, fp
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034d6:	4688      	mov	r8, r1
 80034d8:	4691      	mov	r9, r2
 80034da:	eb1a 0508 	adds.w	r5, sl, r8
 80034de:	eb4b 0609 	adc.w	r6, fp, r9
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	f04f 0400 	mov.w	r4, #0
 80034f4:	0094      	lsls	r4, r2, #2
 80034f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034fa:	008b      	lsls	r3, r1, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	4628      	mov	r0, r5
 8003502:	4631      	mov	r1, r6
 8003504:	f7fc fe60 	bl	80001c8 <__aeabi_uldivmod>
 8003508:	4603      	mov	r3, r0
 800350a:	460c      	mov	r4, r1
 800350c:	461a      	mov	r2, r3
 800350e:	4b50      	ldr	r3, [pc, #320]	; (8003650 <UART_SetConfig+0x6f4>)
 8003510:	fba3 2302 	umull	r2, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	469b      	mov	fp, r3
 800351e:	f04f 0c00 	mov.w	ip, #0
 8003522:	46d9      	mov	r9, fp
 8003524:	46e2      	mov	sl, ip
 8003526:	eb19 0309 	adds.w	r3, r9, r9
 800352a:	eb4a 040a 	adc.w	r4, sl, sl
 800352e:	4699      	mov	r9, r3
 8003530:	46a2      	mov	sl, r4
 8003532:	eb19 090b 	adds.w	r9, r9, fp
 8003536:	eb4a 0a0c 	adc.w	sl, sl, ip
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003546:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800354a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800354e:	4689      	mov	r9, r1
 8003550:	4692      	mov	sl, r2
 8003552:	eb1b 0509 	adds.w	r5, fp, r9
 8003556:	eb4c 060a 	adc.w	r6, ip, sl
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4619      	mov	r1, r3
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	0094      	lsls	r4, r2, #2
 800356e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003572:	008b      	lsls	r3, r1, #2
 8003574:	461a      	mov	r2, r3
 8003576:	4623      	mov	r3, r4
 8003578:	4628      	mov	r0, r5
 800357a:	4631      	mov	r1, r6
 800357c:	f7fc fe24 	bl	80001c8 <__aeabi_uldivmod>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	461a      	mov	r2, r3
 8003586:	4b32      	ldr	r3, [pc, #200]	; (8003650 <UART_SetConfig+0x6f4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <UART_SetConfig+0x6f4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a6:	4498      	add	r8, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	469b      	mov	fp, r3
 80035ac:	f04f 0c00 	mov.w	ip, #0
 80035b0:	46d9      	mov	r9, fp
 80035b2:	46e2      	mov	sl, ip
 80035b4:	eb19 0309 	adds.w	r3, r9, r9
 80035b8:	eb4a 040a 	adc.w	r4, sl, sl
 80035bc:	4699      	mov	r9, r3
 80035be:	46a2      	mov	sl, r4
 80035c0:	eb19 090b 	adds.w	r9, r9, fp
 80035c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035dc:	4689      	mov	r9, r1
 80035de:	4692      	mov	sl, r2
 80035e0:	eb1b 0509 	adds.w	r5, fp, r9
 80035e4:	eb4c 060a 	adc.w	r6, ip, sl
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	f04f 0400 	mov.w	r4, #0
 80035fa:	0094      	lsls	r4, r2, #2
 80035fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003600:	008b      	lsls	r3, r1, #2
 8003602:	461a      	mov	r2, r3
 8003604:	4623      	mov	r3, r4
 8003606:	4628      	mov	r0, r5
 8003608:	4631      	mov	r1, r6
 800360a:	f7fc fddd 	bl	80001c8 <__aeabi_uldivmod>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	461a      	mov	r2, r3
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <UART_SetConfig+0x6f4>)
 8003616:	fba3 1302 	umull	r1, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2164      	movs	r1, #100	; 0x64
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	; 0x32
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <UART_SetConfig+0x6f4>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4442      	add	r2, r8
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	e7ff      	b.n	800363e <UART_SetConfig+0x6e2>
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003648:	40011000 	.word	0x40011000
 800364c:	40011400 	.word	0x40011400
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4e0d      	ldr	r6, [pc, #52]	; (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365a:	1ba4      	subs	r4, r4, r6
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2500      	movs	r5, #0
 8003660:	42a5      	cmp	r5, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4e0b      	ldr	r6, [pc, #44]	; (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <__libc_init_array+0x44>)
 8003668:	f000 f820 	bl	80036ac <_init>
 800366c:	1ba4      	subs	r4, r4, r6
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2500      	movs	r5, #0
 8003672:	42a5      	cmp	r5, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367c:	4798      	blx	r3
 800367e:	3501      	adds	r5, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003686:	4798      	blx	r3
 8003688:	3501      	adds	r5, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	080036e4 	.word	0x080036e4
 8003690:	080036e4 	.word	0x080036e4
 8003694:	080036e4 	.word	0x080036e4
 8003698:	080036e8 	.word	0x080036e8

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <_init>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr

080036b8 <_fini>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr
