
001HumidtyMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039cc  080039cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080039e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080039e0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d911  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001df0  00000000  00000000  0002d94d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002183c  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa0f  00000000  00000000  00052bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf15e  00000000  00000000  0005d603  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  0012c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003994 	.word	0x08003994

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003994 	.word	0x08003994

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Set_Pin_Output>:
#include <stdint.h>



void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f001 faf8 	bl	8001af0 <HAL_GPIO_Init>
}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f001 fad8 	bl	8001af0 <HAL_GPIO_Init>
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <DHT11_Start>:

void DHT11_Start (void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	Set_Pin_Output (dht11_GPIO_Port, dht11_Pin);
 800054c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <DHT11_Start+0x44>)
 8000552:	f7ff ffb9 	bl	80004c8 <Set_Pin_Output>
	HAL_GPIO_WritePin (dht11_GPIO_Port, dht11_Pin, DISABLE);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <DHT11_Start+0x44>)
 800055e:	f001 fc79 	bl	8001e54 <HAL_GPIO_WritePin>
	delay(18000);
 8000562:	f244 6050 	movw	r0, #18000	; 0x4650
 8000566:	f000 f95f 	bl	8000828 <delay>
	HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, ENABLE);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <DHT11_Start+0x44>)
 8000572:	f001 fc6f 	bl	8001e54 <HAL_GPIO_WritePin>
	delay(20);
 8000576:	2014      	movs	r0, #20
 8000578:	f000 f956 	bl	8000828 <delay>
	Set_Pin_Input(dht11_GPIO_Port, dht11_Pin);
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <DHT11_Start+0x44>)
 8000582:	f7ff ffc1 	bl	8000508 <Set_Pin_Input>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020000 	.word	0x40020000

08000590 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 f944 	bl	8000828 <delay>
	if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005a6:	f001 fc3d 	bl	8001e24 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10f      	bne.n	80005d0 <DHT11_Check_Response+0x40>
	{
		delay (80);
 80005b0:	2050      	movs	r0, #80	; 0x50
 80005b2:	f000 f939 	bl	8000828 <delay>
		if ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005bc:	f001 fc32 	bl	8001e24 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <DHT11_Check_Response+0x3c>
			Response = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <DHT11_Check_Response+0x40>
		else
			Response = -1;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005d0:	bf00      	nop
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <DHT11_Check_Response+0x5c>)
 80005d8:	f001 fc24 	bl	8001e24 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f7      	bne.n	80005d2 <DHT11_Check_Response+0x42>
	return Response;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	e03a      	b.n	8000672 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 80005fc:	bf00      	nop
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	4820      	ldr	r0, [pc, #128]	; (8000684 <DHT11_Read+0x94>)
 8000604:	f001 fc0e 	bl	8001e24 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f7      	beq.n	80005fe <DHT11_Read+0xe>
		delay (40);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 f90a 	bl	8000828 <delay>
		if (!(HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)))
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <DHT11_Read+0x94>)
 800061a:	f001 fc03 	bl	8001e24 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10e      	bne.n	8000642 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2201      	movs	r2, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	b25b      	sxtb	r3, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	b25a      	sxtb	r2, r3
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	4013      	ands	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	e00b      	b.n	800065a <DHT11_Read+0x6a>
		}
		else
		{
			i|= (1<<(7-j));
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	f1c3 0307 	rsb	r3, r3, #7
 8000648:	2201      	movs	r2, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	b25a      	sxtb	r2, r3
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	4313      	orrs	r3, r2
 8000656:	b25b      	sxtb	r3, r3
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (dht11_GPIO_Port, dht11_Pin)));
 800065a:	bf00      	nop
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <DHT11_Read+0x94>)
 8000662:	f001 fbdf 	bl	8001e24 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f7      	bne.n	800065c <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	3301      	adds	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d9c1      	bls.n	80005fc <DHT11_Read+0xc>
	}
	return i;
 8000678:	79fb      	ldrb	r3, [r7, #7]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_TIM6_Init(void);
static void MX_UART4_Init(void);
void delay (uint16_t time);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	FLAG = 1;
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000164 	.word	0x20000164

080006a8 <main>:

int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(slave_select_GPIO_Port, slave_select_Pin, ENABLE);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4854      	ldr	r0, [pc, #336]	; (8000804 <main+0x15c>)
 80006b4:	f001 fbce 	bl	8001e54 <HAL_GPIO_WritePin>
  HAL_Init();
 80006b8:	f000 fc4a 	bl	8000f50 <HAL_Init>
  SystemClock_Config();
 80006bc:	f000 f8cc 	bl	8000858 <SystemClock_Config>
  MX_GPIO_Init();
 80006c0:	f000 fa1c 	bl	8000afc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c4:	f000 f982 	bl	80009cc <MX_SPI1_Init>
  MX_ADC1_Init();
 80006c8:	f000 f92e 	bl	8000928 <MX_ADC1_Init>
  MX_TIM6_Init();
 80006cc:	f000 f9b6 	bl	8000a3c <MX_TIM6_Init>
  MX_UART4_Init();
 80006d0:	f000 f9ea 	bl	8000aa8 <MX_UART4_Init>

  HAL_TIM_Base_Start(&htim6);
 80006d4:	484c      	ldr	r0, [pc, #304]	; (8000808 <main+0x160>)
 80006d6:	f002 fc26 	bl	8002f26 <HAL_TIM_Base_Start>
  //potvar.pot_conversion = 600;
  int comp = 700;
 80006da:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80006de:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80006e0:	484a      	ldr	r0, [pc, #296]	; (800080c <main+0x164>)
 80006e2:	f000 fd0d 	bl	8001100 <HAL_ADC_Start>
	 	  if(HAL_ADC_PollForConversion(&hadc1, 50) == HAL_OK)
 80006e6:	2132      	movs	r1, #50	; 0x32
 80006e8:	4848      	ldr	r0, [pc, #288]	; (800080c <main+0x164>)
 80006ea:	f000 fdcf 	bl	800128c <HAL_ADC_PollForConversion>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d106      	bne.n	8000702 <main+0x5a>
	 	  {
	 		  potvar.pot_value = HAL_ADC_GetValue(&hadc1);
 80006f4:	4845      	ldr	r0, [pc, #276]	; (800080c <main+0x164>)
 80006f6:	f000 fe4d 	bl	8001394 <HAL_ADC_GetValue>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <main+0x168>)
 8000700:	805a      	strh	r2, [r3, #2]
	 	  }

	  if(FLAG == 1)
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <main+0x16c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b01      	cmp	r3, #1
 800070a:	d111      	bne.n	8000730 <main+0x88>
	  {
		  HAL_GPIO_TogglePin(led_green_GPIO_Port, led_green_Pin);
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4841      	ldr	r0, [pc, #260]	; (8000818 <main+0x170>)
 8000712:	f001 fbb8 	bl	8001e86 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	f000 fc8c 	bl	8001034 <HAL_Delay>
		  FLAG = 0;
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <main+0x16c>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
		  counter = counter + 1;
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <main+0x174>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <main+0x174>)
 800072e:	701a      	strb	r2, [r3, #0]
	  }



	  if (counter % 2 == 1 && comp > 512)
 8000730:	4b3a      	ldr	r3, [pc, #232]	; (800081c <main+0x174>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b01      	cmp	r3, #1
 800073e:	d1cf      	bne.n	80006e0 <main+0x38>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000746:	ddcb      	ble.n	80006e0 <main+0x38>
	  {
		  DHT11_Start();
 8000748:	f7ff fefe 	bl	8000548 <DHT11_Start>
		  dhtsensorvar.response = DHT11_Check_Response();
 800074c:	f7ff ff20 	bl	8000590 <DHT11_Check_Response>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <main+0x178>)
 8000756:	711a      	strb	r2, [r3, #4]
		  HAL_GPIO_WritePin(slave_select_GPIO_Port, slave_select_Pin, DISABLE);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <main+0x15c>)
 800075e:	f001 fb79 	bl	8001e54 <HAL_GPIO_WritePin>
		  if (dhtsensorvar.response == 1)
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <main+0x178>)
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b01      	cmp	r3, #1
 800076a:	d146      	bne.n	80007fa <main+0x152>
		  {
			  dhtsensorvar.humidity_byte1 = DHT11_Read();
 800076c:	f7ff ff40 	bl	80005f0 <DHT11_Read>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <main+0x178>)
 8000776:	701a      	strb	r2, [r3, #0]
			  dhtsensorvar.humidity_byte2 = DHT11_Read();
 8000778:	f7ff ff3a 	bl	80005f0 <DHT11_Read>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <main+0x178>)
 8000782:	705a      	strb	r2, [r3, #1]
			  dhtsensorvar.temperature_byte1 = DHT11_Read();
 8000784:	f7ff ff34 	bl	80005f0 <DHT11_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <main+0x178>)
 800078e:	709a      	strb	r2, [r3, #2]
			  dhtsensorvar.temperature_byte2 = DHT11_Read();
 8000790:	f7ff ff2e 	bl	80005f0 <DHT11_Read>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <main+0x178>)
 800079a:	70da      	strb	r2, [r3, #3]
			  dhtsensorvar.parity = DHT11_Read();
 800079c:	f7ff ff28 	bl	80005f0 <DHT11_Read>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <main+0x178>)
 80007a6:	80da      	strh	r2, [r3, #6]
			  dhtsensorvar.humidity_RAW = dhtsensorvar.humidity_byte1;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <main+0x178>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <main+0x178>)
 80007b2:	811a      	strh	r2, [r3, #8]
			  dhtsensorvar.temperature_RAW = dhtsensorvar.temperature_byte1;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x178>)
 80007b6:	789b      	ldrb	r3, [r3, #2]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <main+0x178>)
 80007be:	815a      	strh	r2, [r3, #10]
			  dhtsensorvar.TEMPERATURE = (int)dhtsensorvar.temperature_RAW;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <main+0x178>)
 80007c2:	895b      	ldrh	r3, [r3, #10]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <main+0x178>)
 80007ca:	60da      	str	r2, [r3, #12]
			  dhtsensorvar.HUMIDITY = (int)dhtsensorvar.humidity_RAW;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <main+0x178>)
 80007ce:	891b      	ldrh	r3, [r3, #8]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <main+0x178>)
 80007d6:	611a      	str	r2, [r3, #16]
			  uint8_t temp1 = (uint8_t)dhtsensorvar.HUMIDITY;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <main+0x178>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	70bb      	strb	r3, [r7, #2]
			  uint8_t temp2 = (uint8_t)dhtsensorvar.TEMPERATURE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <main+0x178>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	70fb      	strb	r3, [r7, #3]
			  HAL_SPI_Transmit(&hspi1, &temp1, 1, 10);
 80007e6:	1cb9      	adds	r1, r7, #2
 80007e8:	230a      	movs	r3, #10
 80007ea:	2201      	movs	r2, #1
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <main+0x17c>)
 80007ee:	f002 f841 	bl	8002874 <HAL_SPI_Transmit>
			  HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fc1e 	bl	8001034 <HAL_Delay>
 80007f8:	e772      	b.n	80006e0 <main+0x38>
		  }
		  else
		  {
			  HAL_SPI_Abort(&hspi1);
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <main+0x17c>)
 80007fc:	f002 f96e 	bl	8002adc <HAL_SPI_Abort>
	  HAL_ADC_Start(&hadc1);
 8000800:	e76e      	b.n	80006e0 <main+0x38>
 8000802:	bf00      	nop
 8000804:	40020000 	.word	0x40020000
 8000808:	20000078 	.word	0x20000078
 800080c:	2000002c 	.word	0x2000002c
 8000810:	20000074 	.word	0x20000074
 8000814:	20000164 	.word	0x20000164
 8000818:	40020c00 	.word	0x40020c00
 800081c:	20000028 	.word	0x20000028
 8000820:	20000150 	.word	0x20000150
 8000824:	200000f8 	.word	0x200000f8

08000828 <delay>:
  return 0;
}


void delay (uint16_t time)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <delay+0x2c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 800083a:	bf00      	nop
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <delay+0x2c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3f9      	bcc.n	800083c <delay+0x14>
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20000078 	.word	0x20000078

08000858 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f88c 	bl	8003984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <SystemClock_Config+0xc8>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <SystemClock_Config+0xc8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xcc>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fb05 	bl	8001eec <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f996 	bl	8000c18 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2101      	movs	r1, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fd5f 	bl	80023cc <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000914:	f000 f980 	bl	8000c18 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_ADC1_Init+0x98>)
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <MX_ADC1_Init+0x9c>)
 800093e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800094c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_ADC1_Init+0x98>)
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_ADC1_Init+0xa0>)
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_ADC1_Init+0x98>)
 8000984:	2201      	movs	r2, #1
 8000986:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_ADC1_Init+0x98>)
 800098a:	f000 fb75 	bl	8001078 <HAL_ADC_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f940 	bl	8000c18 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8000998:	2301      	movs	r3, #1
 800099a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80009a0:	2302      	movs	r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_ADC1_Init+0x98>)
 80009aa:	f000 fd01 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 f930 	bl	8000c18 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000002c 	.word	0x2000002c
 80009c4:	40012000 	.word	0x40012000
 80009c8:	0f000001 	.word	0x0f000001

080009cc <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a1a:	220a      	movs	r2, #10
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0x68>)
 8000a20:	f001 fec4 	bl	80027ac <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a2a:	f000 f8f5 	bl	8000c18 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_TIM6_Init+0x68>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a52:	2231      	movs	r2, #49	; 0x31
 8000a54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a6c:	f002 fa30 	bl	8002ed0 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a76:	f000 f8cf 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a88:	f002 fb12 	bl	80030b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a92:	f000 f8c1 	bl	8000c18 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000078 	.word	0x20000078
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_UART4_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_UART4_Init+0x4c>)
 8000ae0:	f002 fb62 	bl	80031a8 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f895 	bl	8000c18 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000b8 	.word	0x200000b8
 8000af8:	40004c00 	.word	0x40004c00

08000afc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a34      	ldr	r2, [pc, #208]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <MX_GPIO_Init+0x10c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, slave_select_Pin|dht11_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b88:	4820      	ldr	r0, [pc, #128]	; (8000c0c <MX_GPIO_Init+0x110>)
 8000b8a:	f001 f963 	bl	8001e54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <MX_GPIO_Init+0x114>)
 8000b96:	f001 f95d 	bl	8001e54 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = button_Pin;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <MX_GPIO_Init+0x110>)
 8000bae:	f000 ff9f 	bl	8001af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = slave_select_Pin|dht11_Pin;
 8000bb2:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_GPIO_Init+0x110>)
 8000bcc:	f000 ff90 	bl	8001af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin;
 8000bd0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <MX_GPIO_Init+0x114>)
 8000bea:	f000 ff81 	bl	8001af0 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2006      	movs	r0, #6
 8000bf4:	f000 fed5 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f000 feee 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	10110000 	.word	0x10110000

08000c18 <Error_Handler>:

void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c66:	2007      	movs	r0, #7
 8000c68:	f000 fe90 	bl	800198c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_ADC_MspInit+0x7c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d127      	bne.n	8000cea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_ADC_MspInit+0x80>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot_Pin;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_ADC_MspInit+0x84>)
 8000ce6:	f000 ff03 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23e0      	movs	r3, #224	; 0xe0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_SPI_MspInit+0x8c>)
 8000d76:	f000 febb 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40013000 	.word	0x40013000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_Base_MspInit+0x40>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_TIM_Base_MspInit+0x40>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40001000 	.word	0x40001000
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12c      	bne.n	8000e50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_UART_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e40:	2308      	movs	r3, #8
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e4c:	f000 fe50 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40004c00 	.word	0x40004c00
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f89c 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fff9 	bl	8001ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <SystemInit+0x28>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <SystemInit+0x28>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SystemInit+0x28>)
 8000ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eea:	609a      	str	r2, [r3, #8]
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr  r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd3 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 fd07 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fbbb 	bl	80006a8 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f38:	080039d4 	.word	0x080039d4
  ldr  r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f48:	2000016c 	.word	0x2000016c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fd07 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe50 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd1f 	bl	80019f6 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fce7 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000168 	.word	0x20000168

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000168 	.word	0x20000168

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_Delay+0x40>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e033      	b.n	80010f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fdee 	bl	8000c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d118      	bne.n	80010e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010be:	f023 0302 	bic.w	r3, r3, #2
 80010c2:	f043 0202 	orr.w	r2, r3, #2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 fa92 	bl	80015f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
 80010e6:	e001      	b.n	80010ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_ADC_Start+0x1a>
 8001116:	2302      	movs	r3, #2
 8001118:	e0a5      	b.n	8001266 <HAL_ADC_Start+0x166>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d018      	beq.n	8001162 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_ADC_Start+0x174>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_ADC_Start+0x178>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9a      	lsrs	r2, r3, #18
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3b01      	subs	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f9      	bne.n	8001156 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b01      	cmp	r3, #1
 800116e:	d179      	bne.n	8001264 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800119a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ae:	d106      	bne.n	80011be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f023 0206 	bic.w	r2, r3, #6
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	645a      	str	r2, [r3, #68]	; 0x44
 80011bc:	e002      	b.n	80011c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_ADC_Start+0x17c>)
 80011ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d12a      	bne.n	800123c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_ADC_Start+0x180>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d015      	beq.n	800121c <HAL_ADC_Start+0x11c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_ADC_Start+0x184>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d105      	bne.n	8001206 <HAL_ADC_Start+0x106>
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_ADC_Start+0x17c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_ADC_Start+0x188>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d129      	bne.n	8001264 <HAL_ADC_Start+0x164>
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_ADC_Start+0x17c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d823      	bhi.n	8001264 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d11c      	bne.n	8001264 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	e013      	b.n	8001264 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_ADC_Start+0x180>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10e      	bne.n	8001264 <HAL_ADC_Start+0x164>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d107      	bne.n	8001264 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001262:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83
 800127c:	40012300 	.word	0x40012300
 8001280:	40012000 	.word	0x40012000
 8001284:	40012100 	.word	0x40012100
 8001288:	40012200 	.word	0x40012200

0800128c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d113      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b8:	d10b      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f043 0220 	orr.w	r2, r3, #32
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e05c      	b.n	800138c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012d2:	f7ff fea3 	bl	800101c <HAL_GetTick>
 80012d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d8:	e01a      	b.n	8001310 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d016      	beq.n	8001310 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x6c>
 80012e8:	f7ff fe98 	bl	800101c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d20b      	bcs.n	8001310 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0204 	orr.w	r2, r3, #4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e03d      	b.n	800138c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b02      	cmp	r3, #2
 800131c:	d1dd      	bne.n	80012da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 0212 	mvn.w	r2, #18
 8001326:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d123      	bne.n	800138a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d11f      	bne.n	800138a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001362:	2b00      	cmp	r3, #0
 8001364:	d111      	bne.n	800138a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e105      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x228>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_ADC_ConfigChannel+0x234>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d109      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d105      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d123      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d003      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x1e6>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b11      	cmp	r3, #17
 8001594:	d11b      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d111      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x23c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_ADC_ConfigChannel+0x240>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9a      	lsrs	r2, r3, #18
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <ADC_Init+0x1f0>)
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <ADC_Init+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e00f      	b.n	80016f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0202 	bic.w	r2, r2, #2
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	035a      	lsls	r2, r3, #13
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e007      	b.n	8001768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	3b01      	subs	r3, #1
 8001784:	051a      	lsls	r2, r3, #20
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800179c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	029a      	lsls	r2, r3, #10
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40012300 	.word	0x40012300
 80017e8:	0f000001 	.word	0x0f000001

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff fafe 	bl	800101c <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e052      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0216 	bic.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <HAL_DMA_Abort+0x62>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e013      	b.n	8001aba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff fac3 	bl	800101c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d90c      	bls.n	8001aba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e015      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e4      	bne.n	8001a92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e16b      	b.n	8001de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 815a 	bne.w	8001dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d00b      	beq.n	8001b4a <HAL_GPIO_Init+0x5a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d130      	bne.n	8001bac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0201 	and.w	r2, r3, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0xfc>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b12      	cmp	r3, #18
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80b4 	beq.w	8001dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_GPIO_Init+0x308>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5e      	ldr	r2, [pc, #376]	; (8001df8 <HAL_GPIO_Init+0x308>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <HAL_GPIO_Init+0x308>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d025      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4e      	ldr	r2, [pc, #312]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4d      	ldr	r2, [pc, #308]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4c      	ldr	r2, [pc, #304]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4a      	ldr	r2, [pc, #296]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00e      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4934      	ldr	r1, [pc, #208]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5a:	4a31      	ldr	r2, [pc, #196]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f ae90 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3724      	adds	r7, #36	; 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	401a      	ands	r2, r3
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d104      	bne.n	8001eaa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	041a      	lsls	r2, r3, #16
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fbd4 	bl	8000688 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e25b      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d075      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0a:	4ba3      	ldr	r3, [pc, #652]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d00c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4ba0      	ldr	r3, [pc, #640]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d112      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d10b      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	4b99      	ldr	r3, [pc, #612]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d05b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d157      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e236      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_OscConfig+0x74>
 8001f52:	4b91      	ldr	r3, [pc, #580]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a90      	ldr	r2, [pc, #576]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b8b      	ldr	r3, [pc, #556]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a8a      	ldr	r2, [pc, #552]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a87      	ldr	r2, [pc, #540]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f84:	4b84      	ldr	r3, [pc, #528]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a83      	ldr	r2, [pc, #524]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a80      	ldr	r2, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f83a 	bl	800101c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f836 	bl	800101c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1fb      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f826 	bl	800101c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f822 	bl	800101c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1e7      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1bb      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b56      	ldr	r3, [pc, #344]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4952      	ldr	r1, [pc, #328]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b4f      	ldr	r3, [pc, #316]	; (800219c <HAL_RCC_OscConfig+0x2b0>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe ffdb 	bl	800101c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe ffd7 	bl	800101c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e19c      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4940      	ldr	r1, [pc, #256]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_OscConfig+0x2b0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe ffba 	bl	800101c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe ffb6 	bl	800101c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e17b      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d030      	beq.n	8002138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe ff9a 	bl	800101c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe ff96 	bl	800101c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e15b      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x200>
 800210a:	e015      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe ff83 	bl	800101c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211a:	f7fe ff7f 	bl	800101c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e144      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a0 	beq.w	8002286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d121      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe ff45 	bl	800101c <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e011      	b.n	80021ba <HAL_RCC_OscConfig+0x2ce>
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	42470000 	.word	0x42470000
 80021a0:	42470e80 	.word	0x42470e80
 80021a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a8:	f7fe ff38 	bl	800101c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0fd      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a7c      	ldr	r2, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	e01c      	b.n	8002216 <HAL_RCC_OscConfig+0x32a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0x312>
 80021e4:	4b77      	ldr	r3, [pc, #476]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a76      	ldr	r2, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a73      	ldr	r2, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0x32a>
 80021fe:	4b71      	ldr	r3, [pc, #452]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a70      	ldr	r2, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a6d      	ldr	r2, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fefd 	bl	800101c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fef9 	bl	800101c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0bc      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ee      	beq.n	8002226 <HAL_RCC_OscConfig+0x33a>
 8002248:	e014      	b.n	8002274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe fee7 	bl	800101c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fee3 	bl	800101c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0a6      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b52      	ldr	r3, [pc, #328]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a51      	ldr	r2, [pc, #324]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8092 	beq.w	80023b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002290:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d05c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d141      	bne.n	8002328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_RCC_OscConfig+0x4dc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe feb7 	bl	800101c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe feb3 	bl	800101c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e078      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	019b      	lsls	r3, r3, #6
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4933      	ldr	r1, [pc, #204]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fe8c 	bl	800101c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fe88 	bl	800101c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e04d      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x41c>
 8002326:	e045      	b.n	80023b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x4dc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fe75 	bl	800101c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fe71 	bl	800101c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e036      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x44a>
 8002354:	e02e      	b.n	80023b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e029      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_RCC_OscConfig+0x4d8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	429a      	cmp	r2, r3
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d115      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800238a:	4013      	ands	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d10d      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470060 	.word	0x42470060

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0cc      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d90c      	bls.n	8002408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800242a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d044      	beq.n	80024ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d119      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d003      	beq.n	800248a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	2b03      	cmp	r3, #3
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e067      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4934      	ldr	r1, [pc, #208]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024bc:	f7fe fdae 	bl	800101c <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7fe fdaa 	bl	800101c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e04f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d20c      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4601      	mov	r1, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	fa21 f303 	lsr.w	r3, r1, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fd0e 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00
 8002588:	40023800 	.word	0x40023800
 800258c:	080039ac 	.word	0x080039ac
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d007      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x32>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d008      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x38>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 80b4 	bne.w	800272c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025c6:	60bb      	str	r3, [r7, #8]
       break;
 80025c8:	e0b3      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025cc:	60bb      	str	r3, [r7, #8]
      break;
 80025ce:	e0b0      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d04a      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b55      	ldr	r3, [pc, #340]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	ea03 0501 	and.w	r5, r3, r1
 80025fc:	ea04 0602 	and.w	r6, r4, r2
 8002600:	4629      	mov	r1, r5
 8002602:	4632      	mov	r2, r6
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	0154      	lsls	r4, r2, #5
 800260e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002612:	014b      	lsls	r3, r1, #5
 8002614:	4619      	mov	r1, r3
 8002616:	4622      	mov	r2, r4
 8002618:	1b49      	subs	r1, r1, r5
 800261a:	eb62 0206 	sbc.w	r2, r2, r6
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	0194      	lsls	r4, r2, #6
 8002628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800262c:	018b      	lsls	r3, r1, #6
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	eb64 0402 	sbc.w	r4, r4, r2
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	00e2      	lsls	r2, r4, #3
 800263e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002642:	00d9      	lsls	r1, r3, #3
 8002644:	460b      	mov	r3, r1
 8002646:	4614      	mov	r4, r2
 8002648:	195b      	adds	r3, r3, r5
 800264a:	eb44 0406 	adc.w	r4, r4, r6
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	02a2      	lsls	r2, r4, #10
 8002658:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800265c:	0299      	lsls	r1, r3, #10
 800265e:	460b      	mov	r3, r1
 8002660:	4614      	mov	r4, r2
 8002662:	4618      	mov	r0, r3
 8002664:	4621      	mov	r1, r4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f04f 0400 	mov.w	r4, #0
 800266c:	461a      	mov	r2, r3
 800266e:	4623      	mov	r3, r4
 8002670:	f7fd fdaa 	bl	80001c8 <__aeabi_uldivmod>
 8002674:	4603      	mov	r3, r0
 8002676:	460c      	mov	r4, r1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e049      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	f240 11ff 	movw	r1, #511	; 0x1ff
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	ea03 0501 	and.w	r5, r3, r1
 8002692:	ea04 0602 	and.w	r6, r4, r2
 8002696:	4629      	mov	r1, r5
 8002698:	4632      	mov	r2, r6
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	0154      	lsls	r4, r2, #5
 80026a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026a8:	014b      	lsls	r3, r1, #5
 80026aa:	4619      	mov	r1, r3
 80026ac:	4622      	mov	r2, r4
 80026ae:	1b49      	subs	r1, r1, r5
 80026b0:	eb62 0206 	sbc.w	r2, r2, r6
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	f04f 0400 	mov.w	r4, #0
 80026bc:	0194      	lsls	r4, r2, #6
 80026be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026c2:	018b      	lsls	r3, r1, #6
 80026c4:	1a5b      	subs	r3, r3, r1
 80026c6:	eb64 0402 	sbc.w	r4, r4, r2
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	00e2      	lsls	r2, r4, #3
 80026d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026d8:	00d9      	lsls	r1, r3, #3
 80026da:	460b      	mov	r3, r1
 80026dc:	4614      	mov	r4, r2
 80026de:	195b      	adds	r3, r3, r5
 80026e0:	eb44 0406 	adc.w	r4, r4, r6
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	02a2      	lsls	r2, r4, #10
 80026ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026f2:	0299      	lsls	r1, r3, #10
 80026f4:	460b      	mov	r3, r1
 80026f6:	4614      	mov	r4, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	4621      	mov	r1, r4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	461a      	mov	r2, r3
 8002704:	4623      	mov	r3, r4
 8002706:	f7fd fd5f 	bl	80001c8 <__aeabi_uldivmod>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	3301      	adds	r3, #1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	60bb      	str	r3, [r7, #8]
      break;
 800272a:	e002      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800272e:	60bb      	str	r3, [r7, #8]
      break;
 8002730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002732:	68bb      	ldr	r3, [r7, #8]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_GetHCLKFreq+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff0 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002764:	4601      	mov	r1, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	080039bc 	.word	0x080039bc

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffdc 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 800278c:	4601      	mov	r1, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b5b      	lsrs	r3, r3, #13
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	080039bc 	.word	0x080039bc

080027ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e056      	b.n	800286c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe fa91 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	ea42 0103 	orr.w	r1, r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	f003 0104 	and.w	r1, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_SPI_Transmit+0x22>
 8002892:	2302      	movs	r3, #2
 8002894:	e11e      	b.n	8002ad4 <HAL_SPI_Transmit+0x260>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800289e:	f7fe fbbd 	bl	800101c <HAL_GetTick>
 80028a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
 80028b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028b8:	e103      	b.n	8002ac2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_SPI_Transmit+0x52>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ca:	e0fa      	b.n	8002ac2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2203      	movs	r2, #3
 80028d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	88fa      	ldrh	r2, [r7, #6]
 80028ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002912:	d107      	bne.n	8002924 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d007      	beq.n	8002942 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294a:	d14b      	bne.n	80029e4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_SPI_Transmit+0xe6>
 8002954:	8afb      	ldrh	r3, [r7, #22]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d13e      	bne.n	80029d8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	1c9a      	adds	r2, r3, #2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800297e:	e02b      	b.n	80029d8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d112      	bne.n	80029b4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80029b2:	e011      	b.n	80029d8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b4:	f7fe fb32 	bl	800101c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d803      	bhi.n	80029cc <HAL_SPI_Transmit+0x158>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d102      	bne.n	80029d2 <HAL_SPI_Transmit+0x15e>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029d6:	e074      	b.n	8002ac2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ce      	bne.n	8002980 <HAL_SPI_Transmit+0x10c>
 80029e2:	e04c      	b.n	8002a7e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Transmit+0x17e>
 80029ec:	8afb      	ldrh	r3, [r7, #22]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d140      	bne.n	8002a74 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a18:	e02c      	b.n	8002a74 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d113      	bne.n	8002a50 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a4e:	e011      	b.n	8002a74 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a50:	f7fe fae4 	bl	800101c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d803      	bhi.n	8002a68 <HAL_SPI_Transmit+0x1f4>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d102      	bne.n	8002a6e <HAL_SPI_Transmit+0x1fa>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a72:	e026      	b.n	8002ac2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1cd      	bne.n	8002a1a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f980 	bl	8002d88 <SPI_EndRxTxTransaction>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	e000      	b.n	8002ac2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002ac0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ae8:	4b6e      	ldr	r3, [pc, #440]	; (8002ca4 <HAL_SPI_Abort+0x1c8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_SPI_Abort+0x1cc>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	2264      	movs	r2, #100	; 0x64
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0220 	bic.w	r2, r2, #32
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d117      	bne.n	8002b4e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a62      	ldr	r2, [pc, #392]	; (8002cac <HAL_SPI_Abort+0x1d0>)
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002b36:	e008      	b.n	8002b4a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b07      	cmp	r3, #7
 8002b48:	d1ec      	bne.n	8002b24 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d117      	bne.n	8002b8c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_SPI_Abort+0x1d4>)
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002b74:	e008      	b.n	8002b88 <HAL_SPI_Abort+0xac>
      }
      count--;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d1ec      	bne.n	8002b62 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d12e      	bne.n	8002bf8 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02a      	beq.n	8002bf8 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ff2d 	bl	8001a0e <HAL_DMA_Abort>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0202 	bic.w	r2, r2, #2
 8002bce:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8002be2:	e009      	b.n	8002bf8 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0eb      	beq.n	8002bd0 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d122      	bne.n	8002c4c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01e      	beq.n	8002c4c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	2200      	movs	r2, #0
 8002c14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fef7 	bl	8001a0e <HAL_DMA_Abort>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2240      	movs	r2, #64	; 0x40
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e002      	b.n	8002c6c <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8002c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	057619f1 	.word	0x057619f1
 8002cac:	08002e95 	.word	0x08002e95
 8002cb0:	08002e0d 	.word	0x08002e0d

08002cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cc4:	e04c      	b.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d048      	beq.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cce:	f7fe f9a5 	bl	800101c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d902      	bls.n	8002ce4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d13d      	bne.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfc:	d111      	bne.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d004      	beq.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d107      	bne.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d10f      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00f      	b.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1a3      	bne.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <SPI_EndRxTxTransaction+0x7c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <SPI_EndRxTxTransaction+0x80>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0d5b      	lsrs	r3, r3, #21
 8002da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d112      	bne.n	8002dda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff78 	bl	8002cb4 <SPI_WaitFlagStateUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e00f      	b.n	8002dfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d0f2      	beq.n	8002dda <SPI_EndRxTxTransaction+0x52>
 8002df4:	e000      	b.n	8002df8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002df6:	bf00      	nop
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000
 8002e08:	165e9f81 	.word	0x165e9f81

08002e0c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <SPI_AbortRx_ISR+0x80>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <SPI_AbortRx_ISR+0x84>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a5b      	lsrs	r3, r3, #9
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3a:	e009      	b.n	8002e50 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0eb      	beq.n	8002e28 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2207      	movs	r2, #7
 8002e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	057619f1 	.word	0x057619f1

08002e94 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eaa:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e01d      	b.n	8002f1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd ff4a 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f000 f82e 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d007      	beq.n	8002f58 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d00f      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <TIM_Base_SetConfig+0x118>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3c      	ldr	r2, [pc, #240]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <TIM_Base_SetConfig+0x120>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d02b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d027      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <TIM_Base_SetConfig+0x118>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d023      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2b      	ldr	r2, [pc, #172]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01f      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <TIM_Base_SetConfig+0x120>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a29      	ldr	r2, [pc, #164]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d017      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a28      	ldr	r2, [pc, #160]	; (8003098 <TIM_Base_SetConfig+0x128>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <TIM_Base_SetConfig+0x12c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00f      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <TIM_Base_SetConfig+0x130>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <TIM_Base_SetConfig+0x134>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <TIM_Base_SetConfig+0x138>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <TIM_Base_SetConfig+0x13c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <TIM_Base_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0xf8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d103      	bne.n	8003070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	615a      	str	r2, [r3, #20]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40010400 	.word	0x40010400
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	40001800 	.word	0x40001800
 80030a8:	40001c00 	.word	0x40001c00
 80030ac:	40002000 	.word	0x40002000

080030b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e05a      	b.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d01d      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10c      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03f      	b.n	800323a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fe00 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f829 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003286:	f023 030c 	bic.w	r3, r3, #12
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	430b      	orrs	r3, r1
 8003292:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	f040 818b 	bne.w	80035cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4ac1      	ldr	r2, [pc, #772]	; (80035c0 <UART_SetConfig+0x37c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d005      	beq.n	80032cc <UART_SetConfig+0x88>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4abf      	ldr	r2, [pc, #764]	; (80035c4 <UART_SetConfig+0x380>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 80bd 	bne.w	8003446 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff fa5a 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 80032d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	461d      	mov	r5, r3
 80032d6:	f04f 0600 	mov.w	r6, #0
 80032da:	46a8      	mov	r8, r5
 80032dc:	46b1      	mov	r9, r6
 80032de:	eb18 0308 	adds.w	r3, r8, r8
 80032e2:	eb49 0409 	adc.w	r4, r9, r9
 80032e6:	4698      	mov	r8, r3
 80032e8:	46a1      	mov	r9, r4
 80032ea:	eb18 0805 	adds.w	r8, r8, r5
 80032ee:	eb49 0906 	adc.w	r9, r9, r6
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003302:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003306:	4688      	mov	r8, r1
 8003308:	4691      	mov	r9, r2
 800330a:	eb18 0005 	adds.w	r0, r8, r5
 800330e:	eb49 0106 	adc.w	r1, r9, r6
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	461d      	mov	r5, r3
 8003318:	f04f 0600 	mov.w	r6, #0
 800331c:	196b      	adds	r3, r5, r5
 800331e:	eb46 0406 	adc.w	r4, r6, r6
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	f7fc ff4f 	bl	80001c8 <__aeabi_uldivmod>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	461a      	mov	r2, r3
 8003330:	4ba5      	ldr	r3, [pc, #660]	; (80035c8 <UART_SetConfig+0x384>)
 8003332:	fba3 2302 	umull	r2, r3, r3, r2
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	461d      	mov	r5, r3
 8003340:	f04f 0600 	mov.w	r6, #0
 8003344:	46a9      	mov	r9, r5
 8003346:	46b2      	mov	sl, r6
 8003348:	eb19 0309 	adds.w	r3, r9, r9
 800334c:	eb4a 040a 	adc.w	r4, sl, sl
 8003350:	4699      	mov	r9, r3
 8003352:	46a2      	mov	sl, r4
 8003354:	eb19 0905 	adds.w	r9, r9, r5
 8003358:	eb4a 0a06 	adc.w	sl, sl, r6
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800336c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003370:	4689      	mov	r9, r1
 8003372:	4692      	mov	sl, r2
 8003374:	eb19 0005 	adds.w	r0, r9, r5
 8003378:	eb4a 0106 	adc.w	r1, sl, r6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	461d      	mov	r5, r3
 8003382:	f04f 0600 	mov.w	r6, #0
 8003386:	196b      	adds	r3, r5, r5
 8003388:	eb46 0406 	adc.w	r4, r6, r6
 800338c:	461a      	mov	r2, r3
 800338e:	4623      	mov	r3, r4
 8003390:	f7fc ff1a 	bl	80001c8 <__aeabi_uldivmod>
 8003394:	4603      	mov	r3, r0
 8003396:	460c      	mov	r4, r1
 8003398:	461a      	mov	r2, r3
 800339a:	4b8b      	ldr	r3, [pc, #556]	; (80035c8 <UART_SetConfig+0x384>)
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	2164      	movs	r1, #100	; 0x64
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	3332      	adds	r3, #50	; 0x32
 80033ae:	4a86      	ldr	r2, [pc, #536]	; (80035c8 <UART_SetConfig+0x384>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033bc:	4498      	add	r8, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	461d      	mov	r5, r3
 80033c2:	f04f 0600 	mov.w	r6, #0
 80033c6:	46a9      	mov	r9, r5
 80033c8:	46b2      	mov	sl, r6
 80033ca:	eb19 0309 	adds.w	r3, r9, r9
 80033ce:	eb4a 040a 	adc.w	r4, sl, sl
 80033d2:	4699      	mov	r9, r3
 80033d4:	46a2      	mov	sl, r4
 80033d6:	eb19 0905 	adds.w	r9, r9, r5
 80033da:	eb4a 0a06 	adc.w	sl, sl, r6
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f2:	4689      	mov	r9, r1
 80033f4:	4692      	mov	sl, r2
 80033f6:	eb19 0005 	adds.w	r0, r9, r5
 80033fa:	eb4a 0106 	adc.w	r1, sl, r6
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	461d      	mov	r5, r3
 8003404:	f04f 0600 	mov.w	r6, #0
 8003408:	196b      	adds	r3, r5, r5
 800340a:	eb46 0406 	adc.w	r4, r6, r6
 800340e:	461a      	mov	r2, r3
 8003410:	4623      	mov	r3, r4
 8003412:	f7fc fed9 	bl	80001c8 <__aeabi_uldivmod>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	461a      	mov	r2, r3
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <UART_SetConfig+0x384>)
 800341e:	fba3 1302 	umull	r1, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2164      	movs	r1, #100	; 0x64
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	3332      	adds	r3, #50	; 0x32
 8003430:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <UART_SetConfig+0x384>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	f003 0207 	and.w	r2, r3, #7
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4442      	add	r2, r8
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e26f      	b.n	8003926 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003446:	f7ff f989 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 800344a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	461d      	mov	r5, r3
 8003450:	f04f 0600 	mov.w	r6, #0
 8003454:	46a8      	mov	r8, r5
 8003456:	46b1      	mov	r9, r6
 8003458:	eb18 0308 	adds.w	r3, r8, r8
 800345c:	eb49 0409 	adc.w	r4, r9, r9
 8003460:	4698      	mov	r8, r3
 8003462:	46a1      	mov	r9, r4
 8003464:	eb18 0805 	adds.w	r8, r8, r5
 8003468:	eb49 0906 	adc.w	r9, r9, r6
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003478:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800347c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003480:	4688      	mov	r8, r1
 8003482:	4691      	mov	r9, r2
 8003484:	eb18 0005 	adds.w	r0, r8, r5
 8003488:	eb49 0106 	adc.w	r1, r9, r6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	461d      	mov	r5, r3
 8003492:	f04f 0600 	mov.w	r6, #0
 8003496:	196b      	adds	r3, r5, r5
 8003498:	eb46 0406 	adc.w	r4, r6, r6
 800349c:	461a      	mov	r2, r3
 800349e:	4623      	mov	r3, r4
 80034a0:	f7fc fe92 	bl	80001c8 <__aeabi_uldivmod>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <UART_SetConfig+0x384>)
 80034ac:	fba3 2302 	umull	r2, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	461d      	mov	r5, r3
 80034ba:	f04f 0600 	mov.w	r6, #0
 80034be:	46a9      	mov	r9, r5
 80034c0:	46b2      	mov	sl, r6
 80034c2:	eb19 0309 	adds.w	r3, r9, r9
 80034c6:	eb4a 040a 	adc.w	r4, sl, sl
 80034ca:	4699      	mov	r9, r3
 80034cc:	46a2      	mov	sl, r4
 80034ce:	eb19 0905 	adds.w	r9, r9, r5
 80034d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ea:	4689      	mov	r9, r1
 80034ec:	4692      	mov	sl, r2
 80034ee:	eb19 0005 	adds.w	r0, r9, r5
 80034f2:	eb4a 0106 	adc.w	r1, sl, r6
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	461d      	mov	r5, r3
 80034fc:	f04f 0600 	mov.w	r6, #0
 8003500:	196b      	adds	r3, r5, r5
 8003502:	eb46 0406 	adc.w	r4, r6, r6
 8003506:	461a      	mov	r2, r3
 8003508:	4623      	mov	r3, r4
 800350a:	f7fc fe5d 	bl	80001c8 <__aeabi_uldivmod>
 800350e:	4603      	mov	r3, r0
 8003510:	460c      	mov	r4, r1
 8003512:	461a      	mov	r2, r3
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <UART_SetConfig+0x384>)
 8003516:	fba3 1302 	umull	r1, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2164      	movs	r1, #100	; 0x64
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	3332      	adds	r3, #50	; 0x32
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <UART_SetConfig+0x384>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003536:	4498      	add	r8, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	461d      	mov	r5, r3
 800353c:	f04f 0600 	mov.w	r6, #0
 8003540:	46a9      	mov	r9, r5
 8003542:	46b2      	mov	sl, r6
 8003544:	eb19 0309 	adds.w	r3, r9, r9
 8003548:	eb4a 040a 	adc.w	r4, sl, sl
 800354c:	4699      	mov	r9, r3
 800354e:	46a2      	mov	sl, r4
 8003550:	eb19 0905 	adds.w	r9, r9, r5
 8003554:	eb4a 0a06 	adc.w	sl, sl, r6
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800356c:	4689      	mov	r9, r1
 800356e:	4692      	mov	sl, r2
 8003570:	eb19 0005 	adds.w	r0, r9, r5
 8003574:	eb4a 0106 	adc.w	r1, sl, r6
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	461d      	mov	r5, r3
 800357e:	f04f 0600 	mov.w	r6, #0
 8003582:	196b      	adds	r3, r5, r5
 8003584:	eb46 0406 	adc.w	r4, r6, r6
 8003588:	461a      	mov	r2, r3
 800358a:	4623      	mov	r3, r4
 800358c:	f7fc fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8003590:	4603      	mov	r3, r0
 8003592:	460c      	mov	r4, r1
 8003594:	461a      	mov	r2, r3
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <UART_SetConfig+0x384>)
 8003598:	fba3 1302 	umull	r1, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	2164      	movs	r1, #100	; 0x64
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	3332      	adds	r3, #50	; 0x32
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <UART_SetConfig+0x384>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4442      	add	r2, r8
 80035bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035be:	e1b2      	b.n	8003926 <UART_SetConfig+0x6e2>
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40011400 	.word	0x40011400
 80035c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4ad7      	ldr	r2, [pc, #860]	; (8003930 <UART_SetConfig+0x6ec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d005      	beq.n	80035e2 <UART_SetConfig+0x39e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4ad6      	ldr	r2, [pc, #856]	; (8003934 <UART_SetConfig+0x6f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f040 80d1 	bne.w	8003784 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035e2:	f7ff f8cf 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 80035e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	469a      	mov	sl, r3
 80035ec:	f04f 0b00 	mov.w	fp, #0
 80035f0:	46d0      	mov	r8, sl
 80035f2:	46d9      	mov	r9, fp
 80035f4:	eb18 0308 	adds.w	r3, r8, r8
 80035f8:	eb49 0409 	adc.w	r4, r9, r9
 80035fc:	4698      	mov	r8, r3
 80035fe:	46a1      	mov	r9, r4
 8003600:	eb18 080a 	adds.w	r8, r8, sl
 8003604:	eb49 090b 	adc.w	r9, r9, fp
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003614:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003618:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800361c:	4688      	mov	r8, r1
 800361e:	4691      	mov	r9, r2
 8003620:	eb1a 0508 	adds.w	r5, sl, r8
 8003624:	eb4b 0609 	adc.w	r6, fp, r9
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f04f 0400 	mov.w	r4, #0
 800363a:	0094      	lsls	r4, r2, #2
 800363c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003640:	008b      	lsls	r3, r1, #2
 8003642:	461a      	mov	r2, r3
 8003644:	4623      	mov	r3, r4
 8003646:	4628      	mov	r0, r5
 8003648:	4631      	mov	r1, r6
 800364a:	f7fc fdbd 	bl	80001c8 <__aeabi_uldivmod>
 800364e:	4603      	mov	r3, r0
 8003650:	460c      	mov	r4, r1
 8003652:	461a      	mov	r2, r3
 8003654:	4bb8      	ldr	r3, [pc, #736]	; (8003938 <UART_SetConfig+0x6f4>)
 8003656:	fba3 2302 	umull	r2, r3, r3, r2
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	469b      	mov	fp, r3
 8003664:	f04f 0c00 	mov.w	ip, #0
 8003668:	46d9      	mov	r9, fp
 800366a:	46e2      	mov	sl, ip
 800366c:	eb19 0309 	adds.w	r3, r9, r9
 8003670:	eb4a 040a 	adc.w	r4, sl, sl
 8003674:	4699      	mov	r9, r3
 8003676:	46a2      	mov	sl, r4
 8003678:	eb19 090b 	adds.w	r9, r9, fp
 800367c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003690:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003694:	4689      	mov	r9, r1
 8003696:	4692      	mov	sl, r2
 8003698:	eb1b 0509 	adds.w	r5, fp, r9
 800369c:	eb4c 060a 	adc.w	r6, ip, sl
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	0094      	lsls	r4, r2, #2
 80036b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	4623      	mov	r3, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	4631      	mov	r1, r6
 80036c2:	f7fc fd81 	bl	80001c8 <__aeabi_uldivmod>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <UART_SetConfig+0x6f4>)
 80036ce:	fba3 1302 	umull	r1, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2164      	movs	r1, #100	; 0x64
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a95      	ldr	r2, [pc, #596]	; (8003938 <UART_SetConfig+0x6f4>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ec:	4498      	add	r8, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	469b      	mov	fp, r3
 80036f2:	f04f 0c00 	mov.w	ip, #0
 80036f6:	46d9      	mov	r9, fp
 80036f8:	46e2      	mov	sl, ip
 80036fa:	eb19 0309 	adds.w	r3, r9, r9
 80036fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003702:	4699      	mov	r9, r3
 8003704:	46a2      	mov	sl, r4
 8003706:	eb19 090b 	adds.w	r9, r9, fp
 800370a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003722:	4689      	mov	r9, r1
 8003724:	4692      	mov	sl, r2
 8003726:	eb1b 0509 	adds.w	r5, fp, r9
 800372a:	eb4c 060a 	adc.w	r6, ip, sl
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4619      	mov	r1, r3
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	0094      	lsls	r4, r2, #2
 8003742:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003746:	008b      	lsls	r3, r1, #2
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	4628      	mov	r0, r5
 800374e:	4631      	mov	r1, r6
 8003750:	f7fc fd3a 	bl	80001c8 <__aeabi_uldivmod>
 8003754:	4603      	mov	r3, r0
 8003756:	460c      	mov	r4, r1
 8003758:	461a      	mov	r2, r3
 800375a:	4b77      	ldr	r3, [pc, #476]	; (8003938 <UART_SetConfig+0x6f4>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a72      	ldr	r2, [pc, #456]	; (8003938 <UART_SetConfig+0x6f4>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4442      	add	r2, r8
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	e0d0      	b.n	8003926 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe ffea 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8003788:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	469a      	mov	sl, r3
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	46d0      	mov	r8, sl
 8003794:	46d9      	mov	r9, fp
 8003796:	eb18 0308 	adds.w	r3, r8, r8
 800379a:	eb49 0409 	adc.w	r4, r9, r9
 800379e:	4698      	mov	r8, r3
 80037a0:	46a1      	mov	r9, r4
 80037a2:	eb18 080a 	adds.w	r8, r8, sl
 80037a6:	eb49 090b 	adc.w	r9, r9, fp
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037be:	4688      	mov	r8, r1
 80037c0:	4691      	mov	r9, r2
 80037c2:	eb1a 0508 	adds.w	r5, sl, r8
 80037c6:	eb4b 0609 	adc.w	r6, fp, r9
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4619      	mov	r1, r3
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	0094      	lsls	r4, r2, #2
 80037de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037e2:	008b      	lsls	r3, r1, #2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	4631      	mov	r1, r6
 80037ec:	f7fc fcec 	bl	80001c8 <__aeabi_uldivmod>
 80037f0:	4603      	mov	r3, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <UART_SetConfig+0x6f4>)
 80037f8:	fba3 2302 	umull	r2, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	469b      	mov	fp, r3
 8003806:	f04f 0c00 	mov.w	ip, #0
 800380a:	46d9      	mov	r9, fp
 800380c:	46e2      	mov	sl, ip
 800380e:	eb19 0309 	adds.w	r3, r9, r9
 8003812:	eb4a 040a 	adc.w	r4, sl, sl
 8003816:	4699      	mov	r9, r3
 8003818:	46a2      	mov	sl, r4
 800381a:	eb19 090b 	adds.w	r9, r9, fp
 800381e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003832:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003836:	4689      	mov	r9, r1
 8003838:	4692      	mov	sl, r2
 800383a:	eb1b 0509 	adds.w	r5, fp, r9
 800383e:	eb4c 060a 	adc.w	r6, ip, sl
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f04f 0400 	mov.w	r4, #0
 8003854:	0094      	lsls	r4, r2, #2
 8003856:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800385a:	008b      	lsls	r3, r1, #2
 800385c:	461a      	mov	r2, r3
 800385e:	4623      	mov	r3, r4
 8003860:	4628      	mov	r0, r5
 8003862:	4631      	mov	r1, r6
 8003864:	f7fc fcb0 	bl	80001c8 <__aeabi_uldivmod>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	461a      	mov	r2, r3
 800386e:	4b32      	ldr	r3, [pc, #200]	; (8003938 <UART_SetConfig+0x6f4>)
 8003870:	fba3 1302 	umull	r1, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2164      	movs	r1, #100	; 0x64
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <UART_SetConfig+0x6f4>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388e:	4498      	add	r8, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	469b      	mov	fp, r3
 8003894:	f04f 0c00 	mov.w	ip, #0
 8003898:	46d9      	mov	r9, fp
 800389a:	46e2      	mov	sl, ip
 800389c:	eb19 0309 	adds.w	r3, r9, r9
 80038a0:	eb4a 040a 	adc.w	r4, sl, sl
 80038a4:	4699      	mov	r9, r3
 80038a6:	46a2      	mov	sl, r4
 80038a8:	eb19 090b 	adds.w	r9, r9, fp
 80038ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038b0:	f04f 0100 	mov.w	r1, #0
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c4:	4689      	mov	r9, r1
 80038c6:	4692      	mov	sl, r2
 80038c8:	eb1b 0509 	adds.w	r5, fp, r9
 80038cc:	eb4c 060a 	adc.w	r6, ip, sl
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	0094      	lsls	r4, r2, #2
 80038e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e8:	008b      	lsls	r3, r1, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	4623      	mov	r3, r4
 80038ee:	4628      	mov	r0, r5
 80038f0:	4631      	mov	r1, r6
 80038f2:	f7fc fc69 	bl	80001c8 <__aeabi_uldivmod>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <UART_SetConfig+0x6f4>)
 80038fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2164      	movs	r1, #100	; 0x64
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	3332      	adds	r3, #50	; 0x32
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <UART_SetConfig+0x6f4>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4442      	add	r2, r8
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	e7ff      	b.n	8003926 <UART_SetConfig+0x6e2>
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003930:	40011000 	.word	0x40011000
 8003934:	40011400 	.word	0x40011400
 8003938:	51eb851f 	.word	0x51eb851f

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4e0d      	ldr	r6, [pc, #52]	; (8003974 <__libc_init_array+0x38>)
 8003940:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <__libc_init_array+0x3c>)
 8003942:	1ba4      	subs	r4, r4, r6
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	2500      	movs	r5, #0
 8003948:	42a5      	cmp	r5, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	4e0b      	ldr	r6, [pc, #44]	; (800397c <__libc_init_array+0x40>)
 800394e:	4c0c      	ldr	r4, [pc, #48]	; (8003980 <__libc_init_array+0x44>)
 8003950:	f000 f820 	bl	8003994 <_init>
 8003954:	1ba4      	subs	r4, r4, r6
 8003956:	10a4      	asrs	r4, r4, #2
 8003958:	2500      	movs	r5, #0
 800395a:	42a5      	cmp	r5, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003964:	4798      	blx	r3
 8003966:	3501      	adds	r5, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800396e:	4798      	blx	r3
 8003970:	3501      	adds	r5, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	080039cc 	.word	0x080039cc
 8003978:	080039cc 	.word	0x080039cc
 800397c:	080039cc 	.word	0x080039cc
 8003980:	080039d0 	.word	0x080039d0

08003984 <memset>:
 8003984:	4402      	add	r2, r0
 8003986:	4603      	mov	r3, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	d100      	bne.n	800398e <memset+0xa>
 800398c:	4770      	bx	lr
 800398e:	f803 1b01 	strb.w	r1, [r3], #1
 8003992:	e7f9      	b.n	8003988 <memset+0x4>

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
